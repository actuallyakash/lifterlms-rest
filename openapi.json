{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0-beta.17",
    "title": "LifterLMS REST API",
    "description": "# Introduction\nLifterLMS (LLMS) is fully integrated with the [WordPress REST API](https://developer.wordpress.org/rest-api/). This allows LifterLMS data to be created, read, updated, and deleted using requests in JSON format and using WordPress REST API Authentication methods and standard HTTP verbs which are understood by most HTTP clients.\n## Public Beta\nAs of LifterLMS version 3.34.0, the LifterLMS REST API is included in the LifterLMS core plugin for public evaluation and testing.\nThe specification may change over the next few months as we evaluate feedback and use-cases. If you are building integrations relying on the REST API please keep your eye on our changelog and let us know how things are going!\nIf you're interested in contributing or discussing the REST API, please join us in [GitHub](https://github.com/gocodebox/lifterlms-rest) and post in `#developers` on the [LifterLMS Community Slack](https://lifterlms.com/slack).\n## Requirements\nTo use the latest version of the REST API you must be using the following:\n\n  + LifterLMS Version 3.34.0+.\n  + WordPress 5.2+.\n  + Pretty permalinks in `Settings -> Permalinks` so that the custom endpoints are supported. **Default permalinks will not work.**\n  + An SSL certificate.\n\n## Libraries and Tools\n### Official Libraries\nLifterLMS develops and maintains official libraries for different programming languages so you can easily build around the REST API.\n\n  + [Node/Javascript](https://github.com/gocodebox/llms-api-node)\n  + PHP (coming soon)\n\n### Tools\nSome useful tools to help develop and access the REST API:\n\n  + [Postman](https://www.getpostman.com/) - A multi platform REST API GUI client.\n  + [RESTCLient](https://addons.mozilla.org/en-US/firefox/addon/restclient/) - A free Firefox add-on.\n  + [Advanced REST client](https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo) - A free Google Chrome extension.\n  + [RequestBin](https://requestbin.com/) - A free service allowing you to quickly test webhooks.\n\n# Base URL\nThe LifterLMS REST API extends the [WordPress REST API](https://developer.wordpress.org/rest-api/) which is a [distributed API](https://developer.wordpress.org/rest-api/reference/#a-distributed-api) available individually on any WordPress website.\n\nAs a distributed API, there is no singular root or base URL to use when performing API requests.\n\nFor most WordPress websites, the base REST URL is located at `/wp-json/`, but this can be customized on a site-by-site basis.\n\nIf you're not sure what your site's base REST URL is, you can discover it using the [WordPress REST API discovery proccess](https://developer.wordpress.org/rest-api/using-the-rest-api/discovery/).\n\nThe examples found throughout this reference use `https://example.tld/wp-json/` as the base REST URL. This should be replaced with your website's actual base URL when using the REST API.\n# Authentication\nRequests to most API resources require authentication. Authentication can be preformed by providing API Credentials by using as the username and password via [HTTP Basic Authentication](http://en.wikipedia.org/wiki/Basic_access_authentication) or through request headers.\n\nRequests to the REST API may only be made over [HTTPS](http://en.wikipedia.org/wiki/HTTP_Secure). Requests made over HTTP will fail.\n## Basic Authentication\nThe preferred authentication method is HTTP Basic Authentication.\nTo use HTTP Basic Auth, provide the Consumer Key as the username and the Consumer Secret as the password.\n```\n  curl https://example.tld/wp-json/llms/v1/courses \\\n    -u ck_d7W85twOWT0poKzDSAQzI7:cs_8bsMmRfjW1HgEFw5ad7BIF\n```\n## Header Authentication\nAlternatively, requests may be authenticated by providing the Consumer Key and Consumer Secret as the request headers `X-LLMS-CONSUMER-KEY` and `X-LLMS-CONSUMER-SECRET`.\n```\n  curl https://example.tld/wp-json/llms/v1/courses \\\n    -H X-LLMS-CONSUMER-KEY:ck_d7W85twOWT0poKzDSAQzI7 \\\n    -H X-LLMS-CONSUMER-SECRET:cs_8bsMmRfjW1HgEFw5ad7BIF\n```",
    "x-logo": {
      "altText": "LifterLMS",
      "url": "https://gocodebox.github.io/lifterlms-brand/assets/img/png/logo/lifterlms-logo.png",
      "href": "https://lifterlms.com/"
    }
  },
  "servers": [
    {
      "url": "https://example.tld/wp-json/llms/v1"
    }
  ],
  "security": [
    {
      "Basic-Authentication": []
    }
  ],
  "tags": [
    {
      "name": "API Keys",
      "description": "API Keys are used to authenticate REST API requests.\n\nThe API keys API allows you to create, view, update, and delete API keys.\n\n## API Key Properties\n\n<SchemaDefinition schemaRef=\"#/components/schemas/APIKey\" showReadOnly={true} showWriteOnly={true} />\n"
    },
    {
      "name": "Access Plans",
      "description": "Access plans allow you to define how LMS content is purchased and accessed by your students.\n\nThe access plans API allows you to create, view, update, and delete access plans.\n\n## Access Plan Properties\n\n<SchemaDefinition schemaRef=\"#/components/schemas/AccessPlanResponse\" showReadOnly={true} showWriteOnly={true} />\n"
    },
    {
      "name": "Courses",
      "description": "The courses API allows you to create, view, update, and delete courses.\n\n## Course Properties\n\n<SchemaDefinition schemaRef=\"#/components/schemas/CourseResponse\" showReadOnly={true} showWriteOnly={true} />\n"
    },
    {
      "name": "Instructors",
      "description": "Instructors are members of your site who have the ability to create and manage LMS content and students. Instructors may be Adminstators, LMS Managers, Instructors, and Instructors Assistants.\n\nThe instructors API allows you to create, view, update, and delete student accounts.\n\n## Instructor Properties\n\n<SchemaDefinition schemaRef=\"#/components/schemas/Instructor\" showReadOnly={true} showWriteOnly={true} />\n"
    },
    {
      "name": "Memberships",
      "description": "The memberships API allows you to create, view, update, and delete memberships.\n\n## Membership Properties\n\n<SchemaDefinition schemaRef=\"#/components/schemas/MembershipResponse\" showReadOnly={true} showWriteOnly={true} />\n"
    },
    {
      "name": "Quiz Questions",
      "description": "The quiz questions API allows you to create, view, update, and delete quiz questions.\n\n## Question Types\n\nThere are four unique question types available via the LifterLMS Core:\n\n+ Multiple Choice\n+ Picture Choice\n+ True / False\n+ Content\n\nAn additional eight question types are available with the LifterLMS Advanced Quizzes Add-on:\n\n+ Fill in the Blank\n+ Reorder Items\n+ Reorder Pictures\n+ Short Answer\n+ Long Answer\n+ File Upload\n+ Code\n+ Scale\n\nWhile these additional question types are documented here, they are only available when the LifterLMS Advanced Quizzes Add-on is installed and activated on your site.\n"
    },
    {
      "name": "Quizzes",
      "description": "The quizzes API allows you to create, view, update, and delete quizzes.\n\n## Quiz Properties\n\n<SchemaDefinition schemaRef=\"#/components/schemas/QuizResponse\" showReadOnly={true} showWriteOnly={true} />\n"
    },
    {
      "name": "Sections",
      "description": "The sections API allows you to create, view, update, and delete sections.\n\nSections are used within courses to organize content (lessons) into groups.\n\n## Section Properties\n\n<SchemaDefinition schemaRef=\"#/components/schemas/SectionResponse\" showReadOnly={true} showWriteOnly={true} />\n"
    },
    {
      "name": "Lessons",
      "description": "The lessons API allows you to create, view, update, and delete lessons.\n\n## Lesson Properties\n\n<SchemaDefinition schemaRef=\"#/components/schemas/LessonResponse\" showReadOnly={true} showWriteOnly={true} />\n"
    },
    {
      "name": "Students",
      "description": "Students are members of your site who are (or were) enrolled in your courses and memberships. Students can be any WordPress user account on your site (not exclusively the \"student\" role).\n\nThe students API allows you to create, view, update, and delete student accounts as well as view information about the student's LMS content.\n\n## Student Properties\n\n<SchemaDefinition schemaRef=\"#/components/schemas/Student\" showReadOnly={true} showWriteOnly={true} />\n"
    },
    {
      "name": "Student Enrollments",
      "description": "The Student Enrollments API allows you to create, view, update, and delete records of a student's enrollment into courses and memberships.\n\n## Enrollment Properties\n\n<SchemaDefinition schemaRef=\"#/components/schemas/Enrollment\" showReadOnly={true} showWriteOnly={true} />\n"
    },
    {
      "name": "Student Progress",
      "description": "The Student Progress API allows you to create, view, update, and delete a student's progress through courses.\n\nA student's progress through a course is calculated by dividing the number of lessons completed by the student by the total number of lessons available in a course. It is not possible to manually update the `progress` percentage property of a course, instead you must update the status of each lesson in the course.\n\nWhen updating the status of a course or a section, the status of the lessons within that course or section will be automatically updated to match the status of the course or section. For example, when updating a course's status to `complete` a new `complete` progress record will be created/updated for each incomplete lesson in the course.\n\nFinally, the `progress` property of a lesson will _always_ be either `0` _or_ `100` whereas the `progress` of courses and sections will range from `0` _to_ `100`.\n\n## Progress Properties\n\n<SchemaDefinition schemaRef=\"#/components/schemas/Progress\" showReadOnly={true} showWriteOnly={true} />\n"
    },
    {
      "name": "Webhooks",
      "description": "Webhooks can be created to notify you about LMS-related events that happen on your site.\n\nThe Webhooks API allows you to create, view, update, and delete webhooks.\n\nWebhooks may additionally be managed on the LifterLMS Webhooks screen on your site's WordPress admin panel.\n\n## Topics\n\nThe `topic` is a combination of the resource (e.g. student) and event (e.g. created). Each `topic` maps to one or more hook names (e.g. `llms_user_registered`). The proper hooks are automatically added based on the `topic`.\n\nThe following topics are available:\n\n+ Courses\n  + `course.created`\n  + `course.updated`\n  + `course.deleted`\n  + `course.restored`\n+ Sections\n  + `section.created`\n  + `section.updated`\n  + `section.deleted`\n  + `section.restored`\n+ Lessons\n  + `lesson.created`\n  + `lesson.updated`\n  + `lesson.deleted`\n  + `lesson.restored`\n+ Memberships\n  + `membership.created`\n  + `membership.updated`\n  + `membership.deleted`\n  + `membership.restored`\n+ Students\n  + `student.created`\n  + `student.updated`\n  + `student.deleted`\n+ Student Enrollment\n  + `enrollment.created`\n  + `enrollment.updated`\n  + `enrollment.deleted`\n+ Student Progress\n  + `progress.updated`\n  + `progress.deleted`\n+ Instructors\n  + `instructor.created`\n  + `instructor.updated`\n  + `instructor.deleted`\n\nCustom topics can also be used in order to create a webhook triggered by an arbitrary WordPress hook. For a custom topic use the `action` resource with any hook as the event. For example, to create a webhook triggered by the `user_register` hook the topic would be `action.user_register`.\n\n## Delivery\n\nWebhook payloads are delivered in the background using wp-cron and `wp_remote_post()` (HTTP POST).\n\nCustom headers are supplied to assist with the receipt of the webhook:\n\n| Header                   | Description                                        | Example             |\n| ------------------------ | -------------------------------------------------- | ------------------- |\n| X-LLMS-Webhook-Source    | The URL of the LifterLMS website.                  | https://example.tld |\n| X-LLMS-Webhook-Topic     | The webhook `topic` property.                      | student.created     |\n| X-LLMS-Webhook-Resource  | The webhook `resource` property.                   | student             |\n| X-LLMS-Webhook-Event     | The webhook `event` property.                      | created             |\n| X-LLMS-Webhook-Signature | A base64 encoded HMAC-SHA256 hash of the payload.  |                     |\n| X-LLMS-Webhook-ID        | The unique webhook identifier (WordPress post ID). | 654                 |\n| X-LLMS-Delivery-ID       | A unique ID for the webhook delivery.              | 765                 |\n\nThe payload is a JSON-encoded object of the API resource as if retrieved by a `GET` request.\n\nThe payload for a custom hook will be a JSON-encoded version of the first parameter supplied by the hook.\n\n## Signature Verification\n\nWebhooks are signed by LifterLMS and the event's unique signature is included in the `X-LLMS-Webhook-Signature` header. The signature allows you to verify that the webhook was sent by LifterLMS and not by a third party. We recommend verifying all webhooks and discarding any payloads which cannot be verified.\n\nThe `X-LLMS-Webhook-Signature` contains a timestamp and one or more signatures. The timestamp is prefixed by `t=` and the signatures are prefixed by `v` and an integer. Currently the only valid signature scheme is `v1`.\n\n```\nX-LLMS-Webhook-Signature: t=1562715579,v1=0d579d62ef442b6e2d1d522924aafed480fdaaacbe498486a94445de8b995819\n```\n\nThe signature is generated using a hash-based message authentication code ([HMAC](https://en.wikipedia.org/wiki/HMAC)) with [SHA-256](https://en.wikipedia.org/wiki/SHA-2).\n\nTo verify a webhook signature you must construct an _expected_ webhook signature which you can then compare against the webhook signature supplied with delivery.\n\n#### Step 1: Extract the timestamps and signatures from the header\n\nSplit the header, using the `,` character as the separator, to get a list of elements. Then split each element, using the `=` character as the separator, to get a prefix and value pair.\n\nThe value for the prefix `t` corresponds to the timestamp, and `v1` corresponds to the signature. You can discard all other elements.\n\n#### Step 2: Prepare the payload string for signing\n\nYou achieve this by concatenating:\n\n+ The timestamp (as a string)\n+ The character `.`\n+ The actual JSON payload (i.e. the request's body)\n\n#### Step 3: Generate the expected signature string\n\nCompute an HMAC with the SHA256 hash function. Use the endpoints signing secret as the key, and use the string from Step 2 as the message.\n\n#### Step 4: Compare the signatures\n\nCompare the signature(s) in the header to the expected signature. If a signature matches, compute the difference between the current timestamp and the received timestamp, then decide if the difference is within your tolerance. We recommend accepting a difference of no more than five minutes between the provided timestamp and the current time.\n\n## Webook Properties\n\n<SchemaDefinition schemaRef=\"#/components/schemas/Webhook\" showReadOnly={true} showWriteOnly={true} />\n"
    },
    {
      "name": "Add-On Requirements",
      "description": "API documentation for add-ons developed and maintained by the LifterLMS core team are included for completeness, however the API endpoints for each add-on are only available when the required add-on plugin is installed and activated on your LifterLMS-powered website.\n"
    },
    {
      "name": "Groups",
      "description": "\nGroups are an organizational unit of students. The groups API allows you to create, view, update, and delete groups.\n\n## Requirements\n\nThe groups API is only available through the [LifterLMS Groups advanced add-on](https://lifterlms.com/product/groups). This plugin must be installed and activated in order to utilize the Groups API.\n\n## Group Properties\n\n<SchemaDefinition schemaRef=\"#/components/schemas/GroupResponse\" showReadOnly={true} showWriteOnly={true} />\n"
    },
    {
      "name": "Group Invitations",
      "description": "\nThe group invitations API allows creation, deletion, and listing of group invitations.\n\n## Requirements\n\nThe groups API is only available through the [LifterLMS Groups advanced add-on](https://lifterlms.com/product/groups). This plugin must be installed and activated in order to utilize the Groups API.\n\n## Group Invitation Properties\n\n<SchemaDefinition schemaRef=\"#/components/schemas/GroupInvitation\" showReadOnly={true} showWriteOnly={true} />\n"
    },
    {
      "name": "Group Members",
      "description": "\nThe group members API allows listing and retrieval of group members. The role of a member within a group may be updated and removed from a group using this API as well.\n\nIt is not possible to *add* a memeber directly to a group. Instead a new group invitation should be created (and accepted by the user).\n\n## Requirements\n\nThe groups API is only available through the [LifterLMS Groups advanced add-on](https://lifterlms.com/product/groups). This plugin must be installed and activated in order to utilize the Groups API.\n\n## Group Member Properties\n\n<SchemaDefinition schemaRef=\"#/components/schemas/GroupMember\" showReadOnly={true} showWriteOnly={true} />\n"
    },
    {
      "name": "Group Seats",
      "description": "\nThe group seats API allows querying and updating information related to the number of seats available for a group.\n\n## Requirements\n\nThe groups API is only available through the [LifterLMS Groups advanced add-on](https://lifterlms.com/product/groups). This plugin must be installed and activated in order to utilize the Groups API.\n\n## Group Seat Properties\n\n<SchemaDefinition schemaRef=\"#/components/schemas/GroupSeat\" showReadOnly={true} showWriteOnly={true} />\n"
    }
  ],
  "x-tagGroups": [
    {
      "name": "API Keys",
      "tags": [
        "API Keys"
      ]
    },
    {
      "name": "Courses",
      "tags": [
        "Courses",
        "Sections",
        "Lessons"
      ]
    },
    {
      "name": "E-Commerce",
      "tags": [
        "Access Plans"
      ]
    },
    {
      "name": "Instructors",
      "tags": [
        "Instructors"
      ]
    },
    {
      "name": "Memberships",
      "tags": [
        "Memberships"
      ]
    },
    {
      "name": "Students",
      "tags": [
        "Students",
        "Student Enrollments",
        "Student Progress"
      ]
    },
    {
      "name": "Webhooks",
      "tags": [
        "Webhooks"
      ]
    },
    {
      "name": "Add-Ons",
      "tags": [
        "Add-On Requirements",
        "Groups",
        "Group Invitations",
        "Group Members",
        "Group Seats"
      ]
    }
  ],
  "paths": {
    "/access-plans": {
      "get": {
        "summary": "List access plans",
        "description": "Retrieve a list of access plans.",
        "tags": [
          "Access Plans"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Context"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Order"
          },
          {
            "name": "orderby",
            "description": "Specify the sort field for a collection of results.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "title",
                "date_created",
                "date_updated",
                "menu_order"
              ],
              "default": "id"
            }
          },
          {
            "$ref": "#/components/parameters/Include"
          },
          {
            "$ref": "#/components/parameters/Exclude"
          },
          {
            "name": "post_id",
            "description": "Retrieve access plans for a specific list of one or more posts. Accepts a course/membership id or comma separated list of course/membership ids.",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "123,456"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned a list of access plans.",
            "headers": {
              "Link": {
                "description": "Pagination links for the collection.",
                "schema": {
                  "type": "string",
                  "example": "</wp-json/llms/v1/access-plans?page=1>; rel=\"first\", </wp-json/llms/v1/access-plans?page=2>; rel=\"prev\", </wp-json/llms/v1/access-plans?page=4>; rel=\"next\", </wp-json/llms/v1/access-plans?page=5>; rel=\"last\""
                }
              },
              "X-WP-Total": {
                "$ref": "#/components/headers/PaginationTotalResults"
              },
              "X-WP-TotalPages": {
                "$ref": "#/components/headers/PaginationTotalPages"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessPlanResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request GET \\\n  --url 'https://example.tld/wp-json/llms/v1/access-plans?context=edit&page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderby=SOME_STRING_VALUE&include=1%2C2%2C3&exclude=10%2C11%2C12&post_id=123%2C456' \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.get( '/access-plans?context=edit&page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderby=SOME_STRING_VALUE&include=1%2C2%2C3&exclude=10%2C11%2C12&post_id=123%2C456', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "post": {
        "summary": "Create an access plan",
        "description": "Create a new access plan object.",
        "tags": [
          "Access Plans"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AccessPlanRequest"
                  },
                  {
                    "required": [
                      "title",
                      "price",
                      "post_id"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created the student.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessPlanResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request POST \\\n  --url https://example.tld/wp-json/llms/v1/access-plans \\\n  --user ck_XXXXXX:cs_XXXXXX \\\n  --header 'content-type: application/json' \\\n  --data '{\"price\":199.97,\"sku\":\"LIFETIME-999-001\",\"frequency\":0,\"length\":0,\"period\":\"year\",\"enroll_text\":\"Buy Now\",\"sale_enabled\":false,\"sale_price\":99.97,\"sale_date_start\":\"2019-01-23 00:00:00\",\"sale_date_end\":\"2019-03-23 23:59:59\",\"availability_restrictions\":[123,456,789],\"access_expiration\":\"lifetime\",\"access_expires\":\"2019-03-23 23:59:59\",\"access_length\":1,\"access_period\":\"year\",\"trial_enabled\":false,\"trial_length\":1,\"trial_period\":\"week\",\"trial_price\":1.99,\"post_id\":789,\"redirect_type\":\"self\",\"redirect_page\":1,\"redirect_url\":\"https://example.tld/my/redirect\",\"redirect_forced\":false,\"visibility\":\"visible\",\"date_created\":\"2019-05-20 17:22:05\",\"date_created_gmt\":\"2019-05-20 13:22:05\",\"menu_order\":0,\"title\":\"Liftetime Access\",\"content\":\"\\\\n<ul><li>Expectoque quid ad id</li><li>quod quaerebam, respondeas</li></ul>\\\\n\"}'"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nconst postData = {\n  \"price\": 199.97,\n  \"sku\": \"LIFETIME-999-001\",\n  \"frequency\": 0,\n  \"length\": 0,\n  \"period\": \"year\",\n  \"enroll_text\": \"Buy Now\",\n  \"sale_enabled\": false,\n  \"sale_price\": 99.97,\n  \"sale_date_start\": \"2019-01-23 00:00:00\",\n  \"sale_date_end\": \"2019-03-23 23:59:59\",\n  \"availability_restrictions\": [\n    123,\n    456,\n    789\n  ],\n  \"access_expiration\": \"lifetime\",\n  \"access_expires\": \"2019-03-23 23:59:59\",\n  \"access_length\": 1,\n  \"access_period\": \"year\",\n  \"trial_enabled\": false,\n  \"trial_length\": 1,\n  \"trial_period\": \"week\",\n  \"trial_price\": 1.99,\n  \"post_id\": 789,\n  \"redirect_type\": \"self\",\n  \"redirect_page\": 1,\n  \"redirect_url\": \"https://example.tld/my/redirect\",\n  \"redirect_forced\": false,\n  \"visibility\": \"visible\",\n  \"date_created\": \"2019-05-20 17:22:05\",\n  \"date_created_gmt\": \"2019-05-20 13:22:05\",\n  \"menu_order\": 0,\n  \"title\": \"Liftetime Access\",\n  \"content\": \"\\\\n<ul><li>Expectoque quid ad id</li><li>quod quaerebam, respondeas</li></ul>\\\\n\"\n};\n\nllms.post( '/access-plans', postData, function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      }
    },
    "/access-plans/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Unique AccessPlan Identifier. The WordPress Post `ID`.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        }
      ],
      "get": {
        "summary": "Retrieve an access plan",
        "description": "Retrieve the details of an existing access plan.",
        "tags": [
          "Access Plans"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Context"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the access plan.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessPlanResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request GET \\\n  --url 'https://example.tld/wp-json/llms/v1/access-plans/%7Bid%7D?context=edit' \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.get( '/access-plans/%7Bid%7D?context=edit', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "post": {
        "summary": "Update an access plan",
        "description": "Update the specified access plan by setting the values of the parameters passed. Any parameters not provided will be left unchanged.",
        "tags": [
          "Access Plans"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessPlanRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the access plan.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessPlanResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request POST \\\n  --url https://example.tld/wp-json/llms/v1/access-plans/%7Bid%7D \\\n  --user ck_XXXXXX:cs_XXXXXX \\\n  --header 'content-type: application/json' \\\n  --data '{\"price\":199.97,\"sku\":\"LIFETIME-999-001\",\"frequency\":0,\"length\":0,\"period\":\"year\",\"enroll_text\":\"Buy Now\",\"sale_enabled\":false,\"sale_price\":99.97,\"sale_date_start\":\"2019-01-23 00:00:00\",\"sale_date_end\":\"2019-03-23 23:59:59\",\"availability_restrictions\":[123,456,789],\"access_expiration\":\"lifetime\",\"access_expires\":\"2019-03-23 23:59:59\",\"access_length\":1,\"access_period\":\"year\",\"trial_enabled\":false,\"trial_length\":1,\"trial_period\":\"week\",\"trial_price\":1.99,\"post_id\":789,\"redirect_type\":\"self\",\"redirect_page\":1,\"redirect_url\":\"https://example.tld/my/redirect\",\"redirect_forced\":false,\"visibility\":\"visible\",\"date_created\":\"2019-05-20 17:22:05\",\"date_created_gmt\":\"2019-05-20 13:22:05\",\"menu_order\":0,\"title\":\"Liftetime Access\",\"content\":\"\\\\n<ul><li>Expectoque quid ad id</li><li>quod quaerebam, respondeas</li></ul>\\\\n\"}'"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nconst postData = {\n  \"price\": 199.97,\n  \"sku\": \"LIFETIME-999-001\",\n  \"frequency\": 0,\n  \"length\": 0,\n  \"period\": \"year\",\n  \"enroll_text\": \"Buy Now\",\n  \"sale_enabled\": false,\n  \"sale_price\": 99.97,\n  \"sale_date_start\": \"2019-01-23 00:00:00\",\n  \"sale_date_end\": \"2019-03-23 23:59:59\",\n  \"availability_restrictions\": [\n    123,\n    456,\n    789\n  ],\n  \"access_expiration\": \"lifetime\",\n  \"access_expires\": \"2019-03-23 23:59:59\",\n  \"access_length\": 1,\n  \"access_period\": \"year\",\n  \"trial_enabled\": false,\n  \"trial_length\": 1,\n  \"trial_period\": \"week\",\n  \"trial_price\": 1.99,\n  \"post_id\": 789,\n  \"redirect_type\": \"self\",\n  \"redirect_page\": 1,\n  \"redirect_url\": \"https://example.tld/my/redirect\",\n  \"redirect_forced\": false,\n  \"visibility\": \"visible\",\n  \"date_created\": \"2019-05-20 17:22:05\",\n  \"date_created_gmt\": \"2019-05-20 13:22:05\",\n  \"menu_order\": 0,\n  \"title\": \"Liftetime Access\",\n  \"content\": \"\\\\n<ul><li>Expectoque quid ad id</li><li>quod quaerebam, respondeas</li></ul>\\\\n\"\n};\n\nllms.post( '/access-plans/%7Bid%7D', postData, function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "delete": {
        "summary": "Delete an access plan",
        "description": "Delete an existing access plan.",
        "tags": [
          "Access Plans"
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the access plan."
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request DELETE \\\n  --url https://example.tld/wp-json/llms/v1/access-plans/%7Bid%7D \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.delete( '/access-plans/%7Bid%7D', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      }
    },
    "/api-keys": {
      "get": {
        "summary": "List API keys",
        "description": "Retrieve a list of API keys.",
        "tags": [
          "API Keys"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Context"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Order"
          },
          {
            "name": "orderby",
            "description": "Specify the sort field for a collection of results.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "description",
                "last_access"
              ],
              "default": "id"
            }
          },
          {
            "$ref": "#/components/parameters/Include"
          },
          {
            "$ref": "#/components/parameters/Exclude"
          },
          {
            "name": "user",
            "description": "Include only keys for the specified user(s). Accepts a single id or a comma separated list of ids.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "example": [
                123,
                456
              ]
            }
          },
          {
            "name": "user_not_in",
            "description": "Exclude keys for the specified user(s). Accepts a single id or a comma separated list of ids.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "example": [
                123,
                456
              ]
            }
          },
          {
            "name": "permissions",
            "description": "Include only API keys matching a specific permission.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "read",
                "write",
                "read_write"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned a list of API keys.",
            "headers": {
              "Link": {
                "description": "Pagination links for the collection.",
                "schema": {
                  "type": "string",
                  "example": "</wp-json/llms/v1/api-keys?page=1>; rel=\"first\", </wp-json/llms/v1/api-keys?page=2>; rel=\"prev\", </wp-json/llms/v1/api-keys?page=4>; rel=\"next\", </wp-json/llms/v1/api-keys?page=5>; rel=\"last\""
                }
              },
              "X-WP-Total": {
                "$ref": "#/components/headers/PaginationTotalResults"
              },
              "X-WP-TotalPages": {
                "$ref": "#/components/headers/PaginationTotalPages"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/APIKey"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request GET \\\n  --url 'https://example.tld/wp-json/llms/v1/api-keys?context=edit&page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderby=SOME_STRING_VALUE&include=1%2C2%2C3&exclude=10%2C11%2C12&user=123%2C456&user_not_in=123%2C456&permissions=SOME_STRING_VALUE' \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.get( '/api-keys?context=edit&page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderby=SOME_STRING_VALUE&include=1%2C2%2C3&exclude=10%2C11%2C12&user=123%2C456&user_not_in=123%2C456&permissions=SOME_STRING_VALUE', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "post": {
        "summary": "Create an API key",
        "description": "Create a new API key.",
        "tags": [
          "API Keys"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/APIKey"
                  },
                  {
                    "required": [
                      "user_id",
                      "description",
                      "permissions"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created the student.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "consumer_key": {
                          "description": "The Consumer Key. Only returned once with the initial creation request.",
                          "type": "string",
                          "example": "ck_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
                        },
                        "consumer_secret": {
                          "description": "The Consumer Secret. Only returned once with the initial creation request.",
                          "type": "string",
                          "example": "cs_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
                        }
                      }
                    },
                    {
                      "$ref": "#/components/schemas/APIKey"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request POST \\\n  --url https://example.tld/wp-json/llms/v1/api-keys \\\n  --user ck_XXXXXX:cs_XXXXXX \\\n  --header 'content-type: application/json' \\\n  --data '{\"user_id\":456,\"description\":\"My API Key\",\"permissions\":\"read\"}'"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nconst postData = {\n  \"user_id\": 456,\n  \"description\": \"My API Key\",\n  \"permissions\": \"read\"\n};\n\nllms.post( '/api-keys', postData, function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      }
    },
    "/api-keys/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Unique API Key Identifier.",
          "required": true,
          "example": 987,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        }
      ],
      "get": {
        "summary": "Retrieve an API key",
        "description": "Retrieve the details of an existing API key.",
        "tags": [
          "API Keys"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Context"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIKey"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request GET \\\n  --url 'https://example.tld/wp-json/llms/v1/api-keys/987?context=edit' \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.get( '/api-keys/987?context=edit', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "post": {
        "summary": "Update an API key",
        "description": "Update the specified API key by setting the values of the parameters passed. Any parameters not provided will be left unchanged.",
        "tags": [
          "API Keys"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/APIKey"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIKey"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request POST \\\n  --url https://example.tld/wp-json/llms/v1/api-keys/987 \\\n  --user ck_XXXXXX:cs_XXXXXX \\\n  --header 'content-type: application/json' \\\n  --data '{\"user_id\":456,\"description\":\"My API Key\",\"permissions\":\"read\"}'"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nconst postData = {\n  \"user_id\": 456,\n  \"description\": \"My API Key\",\n  \"permissions\": \"read\"\n};\n\nllms.post( '/api-keys/987', postData, function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "delete": {
        "summary": "Delete an API key",
        "description": "Delete an existing API key.",
        "tags": [
          "API Keys"
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the API key."
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request DELETE \\\n  --url https://example.tld/wp-json/llms/v1/api-keys/987 \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.delete( '/api-keys/987', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      }
    },
    "/courses": {
      "get": {
        "summary": "List courses",
        "description": "Retrieve a list of courses.",
        "tags": [
          "Courses"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Context"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Order"
          },
          {
            "name": "orderby",
            "description": "Specify the sort field for a collection of results.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "title",
                "date_created",
                "date_updated",
                "menu_order"
              ],
              "default": "id"
            }
          },
          {
            "$ref": "#/components/parameters/Include"
          },
          {
            "$ref": "#/components/parameters/Exclude"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned a list of courses.",
            "headers": {
              "Link": {
                "description": "Pagination links for the collection.",
                "schema": {
                  "type": "string",
                  "example": "</wp-json/llms/v1/courses?page=1>; rel=\"first\", </wp-json/llms/v1/courses?page=2>; rel=\"prev\", </wp-json/llms/v1/courses?page=4>; rel=\"next\", </wp-json/llms/v1/courses?page=5>; rel=\"last\""
                }
              },
              "X-WP-Total": {
                "$ref": "#/components/headers/PaginationTotalResults"
              },
              "X-WP-TotalPages": {
                "$ref": "#/components/headers/PaginationTotalPages"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CourseResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request GET \\\n  --url 'https://example.tld/wp-json/llms/v1/courses?context=edit&page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderby=SOME_STRING_VALUE&include=1%2C2%2C3&exclude=10%2C11%2C12' \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.get( '/courses?context=edit&page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderby=SOME_STRING_VALUE&include=1%2C2%2C3&exclude=10%2C11%2C12', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "post": {
        "summary": "Create a course",
        "description": "Create a new course object.",
        "tags": [
          "Courses"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CourseRequest"
                  },
                  {
                    "required": [
                      "title",
                      "content"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created the course.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request POST \\\n  --url https://example.tld/wp-json/llms/v1/courses \\\n  --user ck_XXXXXX:cs_XXXXXX \\\n  --header 'content-type: application/json' \\\n  --data '{\"title\":\"Getting Started with LifterLMS\",\"content\":\"<!-- wp:heading -->\\\\n<h2>Lorem ipsum dolor sit amet.</h2>\\\\n<!-- /wp:heading -->\\\\n\\\\n<!-- wp:paragraph -->\\\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>\\\\n<!-- /wp:paragraph -->\",\"excerpt\":\"Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.\",\"access_opens_message\":\"This course opens on [lifterlms_course_info key=\\\"start_date\\\"].\",\"access_closes_message\":\"This course closed on [lifterlms_course_info key=\\\"end_date\\\"].\",\"enrollment_opens_message\":\"Enrollment in this course opens on [lifterlms_course_info key=\\\"enrollment_start_date\\\"].\",\"enrollment_closes_message\":\"Enrollment in this course closed on [lifterlms_course_info key=\\\"enrollment_end_date\\\"].\",\"capacity_message\":\"Enrollment has closed because the maximum number of allowed students has been reached.\",\"length\":\"7 days\",\"restricted_message\":\"You must enroll in this course to access course content.\",\"date_created\":\"2019-05-20 17:22:05\",\"date_created_gmt\":\"2019-05-20 13:22:05\",\"menu_order\":0,\"slug\":\"getting-started-with-lifterlms\",\"status\":\"publish\",\"password\":\"p4$sW0rd\",\"featured_media\":987,\"comment_status\":\"open\",\"ping_status\":\"open\",\"permalink\":\"https://example.com/course/getting-started-with-lifterlms\",\"post_type\":\"course\",\"catalog_visibility\":\"catalog_search\",\"categories\":[1,2,3],\"tags\":[4,5,6],\"difficulties\":[7],\"tracks\":[8,9],\"audio_embed\":\"https://open.spotify.com/track/trackid\",\"video_embed\":\"https://www.youtube.com/watch?v=videoid\",\"capacity_enabled\":false,\"capacity_limit\":25,\"prerequisite\":456,\"prerequisite_track\":789,\"access_opens_date\":\"2019-05-20 17:22:05\",\"access_closes_date\":\"2019-06-05 17:22:05\",\"enrollment_opens_date\":\"2019-05-15 12:15:00\",\"enrollment_closes_date\":\"2019-10-01 23:59:59\",\"video_tile\":false,\"instructors\":[1,2,3],\"sales_page_type\":\"none\",\"sales_page_page_id\":543,\"sales_page_url\":\"https://example.tld/custom-sales-page\"}'"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nconst postData = {\n  \"title\": \"Getting Started with LifterLMS\",\n  \"content\": \"<!-- wp:heading -->\\\\n<h2>Lorem ipsum dolor sit amet.</h2>\\\\n<!-- /wp:heading -->\\\\n\\\\n<!-- wp:paragraph -->\\\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>\\\\n<!-- /wp:paragraph -->\",\n  \"excerpt\": \"Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.\",\n  \"access_opens_message\": \"This course opens on [lifterlms_course_info key=\\\"start_date\\\"].\",\n  \"access_closes_message\": \"This course closed on [lifterlms_course_info key=\\\"end_date\\\"].\",\n  \"enrollment_opens_message\": \"Enrollment in this course opens on [lifterlms_course_info key=\\\"enrollment_start_date\\\"].\",\n  \"enrollment_closes_message\": \"Enrollment in this course closed on [lifterlms_course_info key=\\\"enrollment_end_date\\\"].\",\n  \"capacity_message\": \"Enrollment has closed because the maximum number of allowed students has been reached.\",\n  \"length\": \"7 days\",\n  \"restricted_message\": \"You must enroll in this course to access course content.\",\n  \"date_created\": \"2019-05-20 17:22:05\",\n  \"date_created_gmt\": \"2019-05-20 13:22:05\",\n  \"menu_order\": 0,\n  \"slug\": \"getting-started-with-lifterlms\",\n  \"status\": \"publish\",\n  \"password\": \"p4$sW0rd\",\n  \"featured_media\": 987,\n  \"comment_status\": \"open\",\n  \"ping_status\": \"open\",\n  \"permalink\": \"https://example.com/course/getting-started-with-lifterlms\",\n  \"post_type\": \"course\",\n  \"catalog_visibility\": \"catalog_search\",\n  \"categories\": [\n    1,\n    2,\n    3\n  ],\n  \"tags\": [\n    4,\n    5,\n    6\n  ],\n  \"difficulties\": [\n    7\n  ],\n  \"tracks\": [\n    8,\n    9\n  ],\n  \"audio_embed\": \"https://open.spotify.com/track/trackid\",\n  \"video_embed\": \"https://www.youtube.com/watch?v=videoid\",\n  \"capacity_enabled\": false,\n  \"capacity_limit\": 25,\n  \"prerequisite\": 456,\n  \"prerequisite_track\": 789,\n  \"access_opens_date\": \"2019-05-20 17:22:05\",\n  \"access_closes_date\": \"2019-06-05 17:22:05\",\n  \"enrollment_opens_date\": \"2019-05-15 12:15:00\",\n  \"enrollment_closes_date\": \"2019-10-01 23:59:59\",\n  \"video_tile\": false,\n  \"instructors\": [\n    1,\n    2,\n    3\n  ],\n  \"sales_page_type\": \"none\",\n  \"sales_page_page_id\": 543,\n  \"sales_page_url\": \"https://example.tld/custom-sales-page\"\n};\n\nllms.post( '/courses', postData, function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      }
    },
    "/courses/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Unique Course Identifier. The WordPress Post `ID`.",
          "required": true,
          "example": 123,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        }
      ],
      "get": {
        "summary": "Retrieve a course",
        "description": "Retrieve the details of an existing course.",
        "tags": [
          "Courses"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Context"
          },
          {
            "$ref": "#/components/parameters/PostPassword"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the course.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request GET \\\n  --url 'https://example.tld/wp-json/llms/v1/courses/123?context=edit&password=p4%24sW0rd' \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.get( '/courses/123?context=edit&password=p4%24sW0rd', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "post": {
        "summary": "Update a course",
        "description": "Update the specified course by setting the values of the parameters passed. Any parameters not provided will be left unchanged.",
        "tags": [
          "Courses"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CourseRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the course.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request POST \\\n  --url https://example.tld/wp-json/llms/v1/courses/123 \\\n  --user ck_XXXXXX:cs_XXXXXX \\\n  --header 'content-type: application/json' \\\n  --data '{\"title\":\"Getting Started with LifterLMS\",\"content\":\"<!-- wp:heading -->\\\\n<h2>Lorem ipsum dolor sit amet.</h2>\\\\n<!-- /wp:heading -->\\\\n\\\\n<!-- wp:paragraph -->\\\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>\\\\n<!-- /wp:paragraph -->\",\"excerpt\":\"Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.\",\"access_opens_message\":\"This course opens on [lifterlms_course_info key=\\\"start_date\\\"].\",\"access_closes_message\":\"This course closed on [lifterlms_course_info key=\\\"end_date\\\"].\",\"enrollment_opens_message\":\"Enrollment in this course opens on [lifterlms_course_info key=\\\"enrollment_start_date\\\"].\",\"enrollment_closes_message\":\"Enrollment in this course closed on [lifterlms_course_info key=\\\"enrollment_end_date\\\"].\",\"capacity_message\":\"Enrollment has closed because the maximum number of allowed students has been reached.\",\"length\":\"7 days\",\"restricted_message\":\"You must enroll in this course to access course content.\",\"date_created\":\"2019-05-20 17:22:05\",\"date_created_gmt\":\"2019-05-20 13:22:05\",\"menu_order\":0,\"slug\":\"getting-started-with-lifterlms\",\"status\":\"publish\",\"password\":\"p4$sW0rd\",\"featured_media\":987,\"comment_status\":\"open\",\"ping_status\":\"open\",\"permalink\":\"https://example.com/course/getting-started-with-lifterlms\",\"post_type\":\"course\",\"catalog_visibility\":\"catalog_search\",\"categories\":[1,2,3],\"tags\":[4,5,6],\"difficulties\":[7],\"tracks\":[8,9],\"audio_embed\":\"https://open.spotify.com/track/trackid\",\"video_embed\":\"https://www.youtube.com/watch?v=videoid\",\"capacity_enabled\":false,\"capacity_limit\":25,\"prerequisite\":456,\"prerequisite_track\":789,\"access_opens_date\":\"2019-05-20 17:22:05\",\"access_closes_date\":\"2019-06-05 17:22:05\",\"enrollment_opens_date\":\"2019-05-15 12:15:00\",\"enrollment_closes_date\":\"2019-10-01 23:59:59\",\"video_tile\":false,\"instructors\":[1,2,3],\"sales_page_type\":\"none\",\"sales_page_page_id\":543,\"sales_page_url\":\"https://example.tld/custom-sales-page\"}'"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nconst postData = {\n  \"title\": \"Getting Started with LifterLMS\",\n  \"content\": \"<!-- wp:heading -->\\\\n<h2>Lorem ipsum dolor sit amet.</h2>\\\\n<!-- /wp:heading -->\\\\n\\\\n<!-- wp:paragraph -->\\\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>\\\\n<!-- /wp:paragraph -->\",\n  \"excerpt\": \"Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.\",\n  \"access_opens_message\": \"This course opens on [lifterlms_course_info key=\\\"start_date\\\"].\",\n  \"access_closes_message\": \"This course closed on [lifterlms_course_info key=\\\"end_date\\\"].\",\n  \"enrollment_opens_message\": \"Enrollment in this course opens on [lifterlms_course_info key=\\\"enrollment_start_date\\\"].\",\n  \"enrollment_closes_message\": \"Enrollment in this course closed on [lifterlms_course_info key=\\\"enrollment_end_date\\\"].\",\n  \"capacity_message\": \"Enrollment has closed because the maximum number of allowed students has been reached.\",\n  \"length\": \"7 days\",\n  \"restricted_message\": \"You must enroll in this course to access course content.\",\n  \"date_created\": \"2019-05-20 17:22:05\",\n  \"date_created_gmt\": \"2019-05-20 13:22:05\",\n  \"menu_order\": 0,\n  \"slug\": \"getting-started-with-lifterlms\",\n  \"status\": \"publish\",\n  \"password\": \"p4$sW0rd\",\n  \"featured_media\": 987,\n  \"comment_status\": \"open\",\n  \"ping_status\": \"open\",\n  \"permalink\": \"https://example.com/course/getting-started-with-lifterlms\",\n  \"post_type\": \"course\",\n  \"catalog_visibility\": \"catalog_search\",\n  \"categories\": [\n    1,\n    2,\n    3\n  ],\n  \"tags\": [\n    4,\n    5,\n    6\n  ],\n  \"difficulties\": [\n    7\n  ],\n  \"tracks\": [\n    8,\n    9\n  ],\n  \"audio_embed\": \"https://open.spotify.com/track/trackid\",\n  \"video_embed\": \"https://www.youtube.com/watch?v=videoid\",\n  \"capacity_enabled\": false,\n  \"capacity_limit\": 25,\n  \"prerequisite\": 456,\n  \"prerequisite_track\": 789,\n  \"access_opens_date\": \"2019-05-20 17:22:05\",\n  \"access_closes_date\": \"2019-06-05 17:22:05\",\n  \"enrollment_opens_date\": \"2019-05-15 12:15:00\",\n  \"enrollment_closes_date\": \"2019-10-01 23:59:59\",\n  \"video_tile\": false,\n  \"instructors\": [\n    1,\n    2,\n    3\n  ],\n  \"sales_page_type\": \"none\",\n  \"sales_page_page_id\": 543,\n  \"sales_page_url\": \"https://example.tld/custom-sales-page\"\n};\n\nllms.post( '/courses/123', postData, function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "delete": {
        "summary": "Delete a course",
        "description": "Delete an existing course.",
        "tags": [
          "Courses"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "description": "Bypass the trash and force course deletion.",
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully moved the course to the trash.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/CourseResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "default": "trash"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "204": {
            "description": "Successfully deleted the course."
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request DELETE \\\n  --url https://example.tld/wp-json/llms/v1/courses/123 \\\n  --user ck_XXXXXX:cs_XXXXXX \\\n  --header 'content-type: application/json' \\\n  --data '{\"force\":false}'"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nconst postData = {\n  \"force\": false\n};\n\nllms.delete( '/courses/123', postData, function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      }
    },
    "/courses/{id}/content": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Unique course Identifier. The WordPress Post `ID`.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        }
      ],
      "get": {
        "summary": "List course content",
        "description": "Retrieve a collection of an existing course's content.",
        "tags": [
          "Courses"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Context"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Order"
          },
          {
            "name": "orderby",
            "description": "Specify the sort field for a collection of results.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "order",
                "id",
                "title"
              ],
              "default": "order"
            }
          },
          {
            "$ref": "#/components/parameters/Include"
          },
          {
            "$ref": "#/components/parameters/Exclude"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the course outline.",
            "headers": {
              "Link": {
                "description": "Pagination links for the collection.",
                "schema": {
                  "type": "string",
                  "example": "</wp-json/llms/v1/courses/1234/content/?page=1>; rel=\"first\", </wp-json/llms/v1/courses/1234/content/?page=2>; rel=\"prev\", </wp-json/llms/v1/courses/1234/content/?page=4>; rel=\"next\", </wp-json/llms/v1/courses/1234/content/?page=5>; rel=\"last\""
                }
              },
              "X-WP-Total": {
                "$ref": "#/components/headers/PaginationTotalResults"
              },
              "X-WP-TotalPages": {
                "$ref": "#/components/headers/PaginationTotalPages"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SectionResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request GET \\\n  --url 'https://example.tld/wp-json/llms/v1/courses/%7Bid%7D/content?context=edit&page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderby=SOME_STRING_VALUE&include=1%2C2%2C3&exclude=10%2C11%2C12' \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.get( '/courses/%7Bid%7D/content?context=edit&page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderby=SOME_STRING_VALUE&include=1%2C2%2C3&exclude=10%2C11%2C12', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      }
    },
    "/courses/{id}/enrollments": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Unique course Identifier. The WordPress Post `ID`.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        }
      ],
      "get": {
        "summary": "List course enrollments",
        "description": "Retrieve a collection of an existing course's enrollments.",
        "tags": [
          "Courses"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Context"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Order"
          },
          {
            "name": "orderby",
            "description": "Specify the sort field for the collection of results.",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "date_updated",
                "date_created"
              ],
              "default": "date_updated"
            }
          },
          {
            "name": "status",
            "description": "Filter results to records matching the specified status.",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/EnrollmentStatus"
            }
          },
          {
            "name": "student",
            "in": "query",
            "description": "Limit results to a specific student or a list of students. Accepts a single student `id` or a comma separated list of student `id`s.",
            "schema": {
              "type": "string",
              "example": [
                1,
                2,
                3
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the course's enrollments.",
            "headers": {
              "Link": {
                "description": "Pagination links for the collection.",
                "schema": {
                  "type": "string",
                  "example": "</wp-json/llms/v1/courses/1234/enrollments?page=1>; rel=\"first\", </wp-json/llms/v1/courses/1234/enrollments?page=2>; rel=\"prev\", </wp-json/llms/v1/courses/1234/enrollments?page=4>; rel=\"next\", </wp-json/llms/v1/courses/1234/enrollments?page=5>; rel=\"last\""
                }
              },
              "X-WP-Total": {
                "$ref": "#/components/headers/PaginationTotalResults"
              },
              "X-WP-TotalPages": {
                "$ref": "#/components/headers/PaginationTotalPages"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Enrollment"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request GET \\\n  --url 'https://example.tld/wp-json/llms/v1/courses/%7Bid%7D/enrollments?context=edit&page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderby=SOME_STRING_VALUE&status=SOME_STRING_VALUE&student=1%2C2%2C3' \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.get( '/courses/%7Bid%7D/enrollments?context=edit&page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderby=SOME_STRING_VALUE&status=SOME_STRING_VALUE&student=1%2C2%2C3', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      }
    },
    "/groups": {
      "get": {
        "summary": "List groups",
        "description": "Retrieves a list of all groups.",
        "tags": [
          "Groups"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Context"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Order"
          },
          {
            "name": "orderby",
            "description": "Specify the sort field for a collection of results.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "name",
                "date_created"
              ],
              "default": "id"
            }
          },
          {
            "$ref": "#/components/parameters/Include"
          },
          {
            "$ref": "#/components/parameters/Exclude"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned a list of groups",
            "headers": {
              "Link": {
                "description": "Pagination links for the collection.",
                "schema": {
                  "type": "string",
                  "example": "</wp-json/llms/v1/group?page=1>; rel=\"first\",\n</wp-json/llms/v1/group?page=2>; rel=\"prev\",\n</wp-json/llms/v1/group?page=4>; rel=\"next\",\n</wp-json/llms/v1/group?page=5>; rel=\"last\"\n"
                }
              },
              "X-WP-Total": {
                "$ref": "#/components/headers/PaginationTotalResults"
              },
              "X-WP-TotalPages": {
                "$ref": "#/components/headers/PaginationTotalPages"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request GET \\\n  --url 'https://example.tld/wp-json/llms/v1/groups?context=edit&page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderby=SOME_STRING_VALUE&include=1%2C2%2C3&exclude=10%2C11%2C12' \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.get( '/groups?context=edit&page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderby=SOME_STRING_VALUE&include=1%2C2%2C3&exclude=10%2C11%2C12', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "post": {
        "summary": "Create a group",
        "description": "Creates a new group.",
        "tags": [
          "Groups"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GroupRequest"
                  },
                  {
                    "required": [
                      "email"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created the group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request POST \\\n  --url https://example.tld/wp-json/llms/v1/groups \\\n  --user ck_XXXXXX:cs_XXXXXX \\\n  --header 'content-type: application/json' \\\n  --data '{\"title\":\"Getting Started with LifterLMS\",\"content\":\"<!-- wp:heading -->\\\\n<h2>Lorem ipsum dolor sit amet.</h2>\\\\n<!-- /wp:heading -->\\\\n\\\\n<!-- wp:paragraph -->\\\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>\\\\n<!-- /wp:paragraph -->\",\"excerpt\":\"Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.\",\"date_created\":\"2019-05-20 17:22:05\",\"date_created_gmt\":\"2019-05-20 13:22:05\",\"menu_order\":0,\"slug\":\"team-codebox\",\"post\":1234,\"visibility\":\"open\",\"logo\":1987,\"banner\":1897}'"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nconst postData = {\n  \"title\": \"Getting Started with LifterLMS\",\n  \"content\": \"<!-- wp:heading -->\\\\n<h2>Lorem ipsum dolor sit amet.</h2>\\\\n<!-- /wp:heading -->\\\\n\\\\n<!-- wp:paragraph -->\\\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>\\\\n<!-- /wp:paragraph -->\",\n  \"excerpt\": \"Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.\",\n  \"date_created\": \"2019-05-20 17:22:05\",\n  \"date_created_gmt\": \"2019-05-20 13:22:05\",\n  \"menu_order\": 0,\n  \"slug\": \"team-codebox\",\n  \"post\": 1234,\n  \"visibility\": \"open\",\n  \"logo\": 1987,\n  \"banner\": 1897\n};\n\nllms.post( '/groups', postData, function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      }
    },
    "/groups/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Unique group Identifier. The WordPress Post `ID`.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        }
      ],
      "get": {
        "summary": "Retrieve a group",
        "description": "Retrieve the details of an existing group.",
        "tags": [
          "Groups"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Context"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request GET \\\n  --url 'https://example.tld/wp-json/llms/v1/groups/%7Bid%7D?context=edit' \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.get( '/groups/%7Bid%7D?context=edit', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "post": {
        "summary": "Update a group",
        "description": "Update the specified group by setting the values of the parameters passed. Any parameters not provided will be left unchanged.",
        "tags": [
          "Groups"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request POST \\\n  --url https://example.tld/wp-json/llms/v1/groups/%7Bid%7D \\\n  --user ck_XXXXXX:cs_XXXXXX \\\n  --header 'content-type: application/json' \\\n  --data '{\"title\":\"Getting Started with LifterLMS\",\"content\":\"<!-- wp:heading -->\\\\n<h2>Lorem ipsum dolor sit amet.</h2>\\\\n<!-- /wp:heading -->\\\\n\\\\n<!-- wp:paragraph -->\\\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>\\\\n<!-- /wp:paragraph -->\",\"excerpt\":\"Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.\",\"date_created\":\"2019-05-20 17:22:05\",\"date_created_gmt\":\"2019-05-20 13:22:05\",\"menu_order\":0,\"slug\":\"team-codebox\",\"post\":1234,\"visibility\":\"open\",\"logo\":1987,\"banner\":1897}'"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nconst postData = {\n  \"title\": \"Getting Started with LifterLMS\",\n  \"content\": \"<!-- wp:heading -->\\\\n<h2>Lorem ipsum dolor sit amet.</h2>\\\\n<!-- /wp:heading -->\\\\n\\\\n<!-- wp:paragraph -->\\\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>\\\\n<!-- /wp:paragraph -->\",\n  \"excerpt\": \"Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.\",\n  \"date_created\": \"2019-05-20 17:22:05\",\n  \"date_created_gmt\": \"2019-05-20 13:22:05\",\n  \"menu_order\": 0,\n  \"slug\": \"team-codebox\",\n  \"post\": 1234,\n  \"visibility\": \"open\",\n  \"logo\": 1987,\n  \"banner\": 1897\n};\n\nllms.post( '/groups/%7Bid%7D', postData, function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "delete": {
        "summary": "Delete a group",
        "description": "Delete an existing group.",
        "tags": [
          "Groups"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "description": "Bypass the trash and force group deletion.",
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully moved the group to the trash.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GroupResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "default": "trash"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "204": {
            "description": "Successfully deleted the group."
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request DELETE \\\n  --url https://example.tld/wp-json/llms/v1/groups/%7Bid%7D \\\n  --user ck_XXXXXX:cs_XXXXXX \\\n  --header 'content-type: application/json' \\\n  --data '{\"force\":false}'"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nconst postData = {\n  \"force\": false\n};\n\nllms.delete( '/groups/%7Bid%7D', postData, function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      }
    },
    "/groups/{id}/invitations": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Unique group Identifier. The WordPress Post `ID`.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        }
      ],
      "get": {
        "summary": "List group invitations",
        "description": "Retrieves a list of all group invitations.",
        "tags": [
          "Group Invitations"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Context"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Order"
          },
          {
            "name": "orderby",
            "description": "Specify the sort field for a collection of results.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id"
              ],
              "default": "id"
            }
          },
          {
            "$ref": "#/components/parameters/Include"
          },
          {
            "$ref": "#/components/parameters/Exclude"
          },
          {
            "name": "email",
            "description": "Limit results to a list of email addresses. Accepts a single email or a comma-separated list of emails.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "jeffrey@fakewebsite.tld"
            }
          },
          {
            "name": "role",
            "description": "Limit results to a list of roles. Accepts a single role or a comma-separated list of roles.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "member",
                "leader",
                "admin"
              ],
              "example": "leader,admin",
              "default": "member,leader,admin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned a list of group invitations",
            "headers": {
              "Link": {
                "description": "Pagination links for the collection.",
                "schema": {
                  "type": "string",
                  "example": "</wp-json/llms/v1/group/123/invitations?page=1>; rel=\"first\",\n</wp-json/llms/v1/group/123/invitations?page=2>; rel=\"prev\",\n</wp-json/llms/v1/group/123/invitations?page=4>; rel=\"next\",\n</wp-json/llms/v1/group/123/invitations?page=5>; rel=\"last\"\n"
                }
              },
              "X-WP-Total": {
                "$ref": "#/components/headers/PaginationTotalResults"
              },
              "X-WP-TotalPages": {
                "$ref": "#/components/headers/PaginationTotalPages"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupInvitation"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request GET \\\n  --url 'https://example.tld/wp-json/llms/v1/groups/%7Bid%7D/invitations?context=edit&page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderby=SOME_STRING_VALUE&include=1%2C2%2C3&exclude=10%2C11%2C12&email=jeffrey%40fakewebsite.tld&role=leader%2Cadmin' \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.get( '/groups/%7Bid%7D/invitations?context=edit&page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderby=SOME_STRING_VALUE&include=1%2C2%2C3&exclude=10%2C11%2C12&email=jeffrey%40fakewebsite.tld&role=leader%2Cadmin', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "post": {
        "summary": "Create an invitation",
        "description": "Creates a new group invitation.",
        "tags": [
          "Group Invitations"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupInvitation"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created the group invitation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupInvitation"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request POST \\\n  --url https://example.tld/wp-json/llms/v1/groups/%7Bid%7D/invitations \\\n  --user ck_XXXXXX:cs_XXXXXX \\\n  --header 'content-type: application/json' \\\n  --data '{\"email\":\"stephen@example.net\",\"role\":\"member\"}'"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nconst postData = {\n  \"email\": \"stephen@example.net\",\n  \"role\": \"member\"\n};\n\nllms.post( '/groups/%7Bid%7D/invitations', postData, function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      }
    },
    "/groups/{id}/invitations/{invitation_id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Unique group Identifier. The WordPress Post `ID`.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        },
        {
          "name": "invitation_id",
          "in": "path",
          "description": "Unique invitation Identifier",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        }
      ],
      "get": {
        "summary": "Retrieve a group invitation",
        "description": "Retrieve the details of an existing group invitation.",
        "tags": [
          "Group Invitations"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Context"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the group invitation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupInvitation"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request GET \\\n  --url 'https://example.tld/wp-json/llms/v1/groups/%7Bid%7D/invitations/%7Binvitation_id%7D?context=edit' \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.get( '/groups/%7Bid%7D/invitations/%7Binvitation_id%7D?context=edit', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "delete": {
        "summary": "Delete a group invitation",
        "description": "Delete an existing group invitation.",
        "tags": [
          "Group Invitations"
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the group."
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request DELETE \\\n  --url https://example.tld/wp-json/llms/v1/groups/%7Bid%7D/invitations/%7Binvitation_id%7D \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.delete( '/groups/%7Bid%7D/invitations/%7Binvitation_id%7D', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      }
    },
    "/groups/{id}/members": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Unique group Identifier. The WordPress Post `ID`.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        }
      ],
      "get": {
        "summary": "List group members",
        "description": "Retrieves a list of all group members.",
        "tags": [
          "Group Members"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Context"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Order"
          },
          {
            "name": "orderby",
            "description": "Specify the sort field for a collection of results.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "name"
              ],
              "default": "id"
            }
          },
          {
            "$ref": "#/components/parameters/Include"
          },
          {
            "$ref": "#/components/parameters/Exclude"
          },
          {
            "name": "group_roles",
            "description": "Filter members by group role.\n\nAccepts a single role or a comma separated list of roles.\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "member",
                "leader",
                "admin",
                "primary_admin"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned a list of group members",
            "headers": {
              "Link": {
                "description": "Pagination links for the collection.",
                "schema": {
                  "type": "string",
                  "example": "</wp-json/llms/v1/group/123/members?page=1>; rel=\"first\",\n</wp-json/llms/v1/group/123/members?page=2>; rel=\"prev\",\n</wp-json/llms/v1/group/123/members?page=4>; rel=\"next\",\n</wp-json/llms/v1/group/123/members?page=5>; rel=\"last\"\n"
                }
              },
              "X-WP-Total": {
                "$ref": "#/components/headers/PaginationTotalResults"
              },
              "X-WP-TotalPages": {
                "$ref": "#/components/headers/PaginationTotalPages"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupMember"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request GET \\\n  --url 'https://example.tld/wp-json/llms/v1/groups/%7Bid%7D/members?context=edit&page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderby=SOME_STRING_VALUE&include=1%2C2%2C3&exclude=10%2C11%2C12&group_roles=SOME_STRING_VALUE' \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.get( '/groups/%7Bid%7D/members?context=edit&page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderby=SOME_STRING_VALUE&include=1%2C2%2C3&exclude=10%2C11%2C12&group_roles=SOME_STRING_VALUE', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      }
    },
    "/groups/{id}/members/{member_id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Unique group Identifier. The WordPress Post `ID`.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        },
        {
          "name": "member_id",
          "in": "path",
          "description": "Unique member Identifier. The WordPress User `ID`.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        }
      ],
      "get": {
        "summary": "Retrieve a group member",
        "description": "Retrieve the details of an existing group member.",
        "tags": [
          "Group Members"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Context"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the group member.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupMember"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request GET \\\n  --url 'https://example.tld/wp-json/llms/v1/groups/%7Bid%7D/members/%7Bmember_id%7D?context=edit' \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.get( '/groups/%7Bid%7D/members/%7Bmember_id%7D?context=edit', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "post": {
        "summary": "Update a group member",
        "description": "Update the details of an existing group member.",
        "tags": [
          "Group Members"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupMember"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the group member.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupMember"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request POST \\\n  --url https://example.tld/wp-json/llms/v1/groups/%7Bid%7D/members/%7Bmember_id%7D \\\n  --user ck_XXXXXX:cs_XXXXXX \\\n  --header 'content-type: application/json' \\\n  --data '{\"group_role\":\"member\"}'"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nconst postData = {\n  \"group_role\": \"member\"\n};\n\nllms.post( '/groups/%7Bid%7D/members/%7Bmember_id%7D', postData, function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "delete": {
        "summary": "Remove a group member",
        "description": "Remove an existing group member.",
        "tags": [
          "Group Members"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/EnrollmentTrigger"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed from the member from the group."
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request DELETE \\\n  --url 'https://example.tld/wp-json/llms/v1/groups/%7Bid%7D/members/%7Bmember_id%7D?trigger=SOME_STRING_VALUE' \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.delete( '/groups/%7Bid%7D/members/%7Bmember_id%7D?trigger=SOME_STRING_VALUE', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      }
    },
    "/groups/{id}/seats": {
      "parameters": [
        {
          "name": "id",
          "description": "Unique group Identifer. The WordPress User `ID`.",
          "example": 123,
          "in": "path",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        }
      ],
      "get": {
        "summary": "Get group seats",
        "description": "Retrieves information about the group's seats.",
        "tags": [
          "Group Seats"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the groups's seats.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupSeat"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request GET \\\n  --url https://example.tld/wp-json/llms/v1/groups/123/seats \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.get( '/groups/123/seats', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "put": {
        "summary": "Update group seats",
        "description": "Update the seat information for a group.",
        "tags": [
          "Group Seats"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupSeat"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the group's seats.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupSeat"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request PUT \\\n  --url https://example.tld/wp-json/llms/v1/groups/123/seats \\\n  --user ck_XXXXXX:cs_XXXXXX \\\n  --header 'content-type: application/json' \\\n  --data '{\"total\":20}'"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nconst postData = {\n  \"total\": 20\n};\n\nllms.put( '/groups/123/seats', postData, function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      }
    },
    "/instructors": {
      "get": {
        "summary": "List instructors",
        "description": "Retrieves a list of all instructors.",
        "tags": [
          "Instructors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Order"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/SearchColumns"
          },
          {
            "name": "orderby",
            "description": "Specify the sort field for a collection of results.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "email",
                "name",
                "registered_date"
              ],
              "default": "id"
            }
          },
          {
            "$ref": "#/components/parameters/Include"
          },
          {
            "$ref": "#/components/parameters/Exclude"
          },
          {
            "name": "post_in",
            "description": "Retrieve only instructors for the specified course(s) and/or\nmembership(s).\n\nAccepts a single WP Post ID or a comma separated list of IDs.\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": [
                1,
                2,
                3
              ]
            }
          },
          {
            "name": "post_not_in",
            "description": "Retrieve only instructors for in the specified course(s) and/or\nmembership(s).\n\nAccepts a single WP Post ID or a comma separated list of IDs.\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": [
                4,
                5,
                6
              ]
            }
          },
          {
            "name": "roles",
            "description": "Retrieve instructors by a specific role.\n\nAccepts a single role name or a comma separated list of role names.\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": [
                "instructor",
                "lms_manager"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned a list of instructors",
            "headers": {
              "Link": {
                "description": "Pagination links for the collection.",
                "schema": {
                  "type": "string",
                  "example": "</wp-json/llms/v1/instructors?page=1>; rel=\"first\", </wp-json/llms/v1/instructors?page=2>; rel=\"prev\", </wp-json/llms/v1/instructors?page=4>; rel=\"next\", </wp-json/llms/v1/instructors?page=5>; rel=\"last\""
                }
              },
              "X-WP-Total": {
                "$ref": "#/components/headers/PaginationTotalResults"
              },
              "X-WP-TotalPages": {
                "$ref": "#/components/headers/PaginationTotalPages"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Instructor"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request GET \\\n  --url 'https://example.tld/wp-json/llms/v1/instructors?page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&search=jamie%40lifterlms.com&search_columns=email%2Cusername&orderby=SOME_STRING_VALUE&include=1%2C2%2C3&exclude=10%2C11%2C12&post_in=1%2C2%2C3&post_not_in=4%2C5%2C6&roles=instructor%2Clms_manager' \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.get( '/instructors?page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&search=jamie%40lifterlms.com&search_columns=email%2Cusername&orderby=SOME_STRING_VALUE&include=1%2C2%2C3&exclude=10%2C11%2C12&post_in=1%2C2%2C3&post_not_in=4%2C5%2C6&roles=instructor%2Clms_manager', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "post": {
        "summary": "Create an instructor",
        "description": "Creates a new instructor object.",
        "tags": [
          "Instructors"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Instructor"
                  },
                  {
                    "required": [
                      "email"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created the instructor.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instructor"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request POST \\\n  --url https://example.tld/wp-json/llms/v1/instructors \\\n  --user ck_XXXXXX:cs_XXXXXX \\\n  --header 'content-type: application/json' \\\n  --data '{\"email\":\"jamie@lifterlms.com\",\"username\":\"jamie2019\",\"password\":\"my_l337-p@$5w0rd!\",\"description\":\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\"registered_date\":\"2019-05-03 19:25:01\",\"url\":\"https://myawesomewebsite.tld\",\"first_name\":\"Jamie\",\"last_name\":\"Cook\",\"nickname\":\"JamieC\",\"name\":\"Jamie Cook\",\"billing_address_1\":\"1234 Somewhere Place\",\"billing_address_2\":\"Suite ABC\",\"billing_city\":\"Anywhere\",\"billing_state\":\"CA\",\"billing_postcode\":\"12345-678\",\"billing_country\":\"US\",\"roles\":[\"instructor\"]}'"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nconst postData = {\n  \"email\": \"jamie@lifterlms.com\",\n  \"username\": \"jamie2019\",\n  \"password\": \"my_l337-p@$5w0rd!\",\n  \"description\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\n  \"registered_date\": \"2019-05-03 19:25:01\",\n  \"url\": \"https://myawesomewebsite.tld\",\n  \"first_name\": \"Jamie\",\n  \"last_name\": \"Cook\",\n  \"nickname\": \"JamieC\",\n  \"name\": \"Jamie Cook\",\n  \"billing_address_1\": \"1234 Somewhere Place\",\n  \"billing_address_2\": \"Suite ABC\",\n  \"billing_city\": \"Anywhere\",\n  \"billing_state\": \"CA\",\n  \"billing_postcode\": \"12345-678\",\n  \"billing_country\": \"US\",\n  \"roles\": [\n    \"instructor\"\n  ]\n};\n\nllms.post( '/instructors', postData, function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      }
    },
    "/instructors/{id}": {
      "parameters": [
        {
          "name": "id",
          "description": "Unique Instructor Identifer. The WordPress User `ID`.",
          "example": 123,
          "in": "path",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        }
      ],
      "get": {
        "summary": "Retrieve an instructor",
        "description": "Retrieve the details of an existing instructor.",
        "tags": [
          "Instructors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Context"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the instructor.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instructor"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request GET \\\n  --url 'https://example.tld/wp-json/llms/v1/instructors/123?context=edit' \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.get( '/instructors/123?context=edit', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "post": {
        "summary": "Update an instructor",
        "description": "Update the specified instructor by setting the values of the parameters passed. Any parameters not provided will be left unchanged.",
        "tags": [
          "Instructors"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Instructor"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the instructor.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instructor"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request POST \\\n  --url https://example.tld/wp-json/llms/v1/instructors/123 \\\n  --user ck_XXXXXX:cs_XXXXXX \\\n  --header 'content-type: application/json' \\\n  --data '{\"email\":\"jamie@lifterlms.com\",\"username\":\"jamie2019\",\"password\":\"my_l337-p@$5w0rd!\",\"description\":\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\"registered_date\":\"2019-05-03 19:25:01\",\"url\":\"https://myawesomewebsite.tld\",\"first_name\":\"Jamie\",\"last_name\":\"Cook\",\"nickname\":\"JamieC\",\"name\":\"Jamie Cook\",\"billing_address_1\":\"1234 Somewhere Place\",\"billing_address_2\":\"Suite ABC\",\"billing_city\":\"Anywhere\",\"billing_state\":\"CA\",\"billing_postcode\":\"12345-678\",\"billing_country\":\"US\",\"roles\":[\"instructor\"]}'"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nconst postData = {\n  \"email\": \"jamie@lifterlms.com\",\n  \"username\": \"jamie2019\",\n  \"password\": \"my_l337-p@$5w0rd!\",\n  \"description\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\n  \"registered_date\": \"2019-05-03 19:25:01\",\n  \"url\": \"https://myawesomewebsite.tld\",\n  \"first_name\": \"Jamie\",\n  \"last_name\": \"Cook\",\n  \"nickname\": \"JamieC\",\n  \"name\": \"Jamie Cook\",\n  \"billing_address_1\": \"1234 Somewhere Place\",\n  \"billing_address_2\": \"Suite ABC\",\n  \"billing_city\": \"Anywhere\",\n  \"billing_state\": \"CA\",\n  \"billing_postcode\": \"12345-678\",\n  \"billing_country\": \"US\",\n  \"roles\": [\n    \"instructor\"\n  ]\n};\n\nllms.post( '/instructors/123', postData, function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "delete": {
        "summary": "Delete an instructor",
        "description": "Delete an existing instructor.",
        "tags": [
          "Instructors"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reassign": {
                    "description": "ID of a WordPress User.\n\nAny posts owned by the deleted user will be reassigned to this user.\n\nLMS content and statuses (enrollments, for example), are not reassigned.\n\nDefault (passing `0` or nothing) delete's the users's content.\n",
                    "type": "integer",
                    "minimum": 0,
                    "default": 0,
                    "example": 456
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successfully deleted the instructor."
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request DELETE \\\n  --url https://example.tld/wp-json/llms/v1/instructors/123 \\\n  --user ck_XXXXXX:cs_XXXXXX \\\n  --header 'content-type: application/json' \\\n  --data '{\"reassign\":456}'"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nconst postData = {\n  \"reassign\": 456\n};\n\nllms.delete( '/instructors/123', postData, function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      }
    },
    "/instructors/{id}/content": {
      "parameters": [
        {
          "name": "id",
          "description": "The instructor's ID.",
          "example": 123,
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "summary": "List an instructor's content",
        "description": "Retrieves a list of all the instructor's LMS content.",
        "tags": [
          "Instructors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Order"
          },
          {
            "name": "orderby",
            "description": "Specify the sort field for a collection of results.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "email"
              ],
              "default": "id"
            }
          },
          {
            "$ref": "#/components/parameters/Include"
          },
          {
            "$ref": "#/components/parameters/Exclude"
          },
          {
            "name": "post",
            "description": "Retrieve content for a specific list of one or more posts. Accepts a post `id` or comma separated list of post `id`s.",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "123,456"
            }
          },
          {
            "name": "post_exclude",
            "description": "Exclude content for a specific list of one or more posts. Accepts a post `id` or comma separated list of post `id`s.",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "789,324"
            }
          },
          {
            "$ref": "#/components/parameters/PostType"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned a list of the instructor's content.",
            "headers": {
              "Link": {
                "description": "Pagination links for the collection.",
                "schema": {
                  "type": "string",
                  "example": "</wp-json/llms/v1/instructors/123/content?page=1>; rel=\"first\", </wp-json/llms/v1/instructors/123/content?page=2>; rel=\"prev\", </wp-json/llms/v1/instructors/123/content?page=4>; rel=\"next\", </wp-json/llms/v1/instructors/123/content?page=5>; rel=\"last\""
                }
              },
              "X-WP-Total": {
                "$ref": "#/components/headers/PaginationTotalResults"
              },
              "X-WP-TotalPages": {
                "$ref": "#/components/headers/PaginationTotalPages"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/CourseResponse"
                      },
                      {
                        "$ref": "#/components/schemas/MembershipResponse"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request GET \\\n  --url 'https://example.tld/wp-json/llms/v1/instructors/123/content?page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderby=SOME_STRING_VALUE&include=1%2C2%2C3&exclude=10%2C11%2C12&post=123%2C456&post_exclude=789%2C324&post_type=SOME_STRING_VALUE' \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.get( '/instructors/123/content?page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderby=SOME_STRING_VALUE&include=1%2C2%2C3&exclude=10%2C11%2C12&post=123%2C456&post_exclude=789%2C324&post_type=SOME_STRING_VALUE', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      }
    },
    "/lessons": {
      "get": {
        "summary": "List lessons",
        "description": "Retrieve a list of lessons.",
        "tags": [
          "Lessons"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Context"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Order"
          },
          {
            "name": "orderby",
            "description": "Specify the sort field for a collection of results.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "title",
                "date_created",
                "date_updated",
                "order"
              ],
              "default": "id"
            }
          },
          {
            "$ref": "#/components/parameters/Include"
          },
          {
            "$ref": "#/components/parameters/Exclude"
          },
          {
            "name": "parent",
            "description": "Filter lessons by the parent post (section) ID.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "example": 987
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned a list of lessons.",
            "headers": {
              "Link": {
                "description": "Pagination links for the collection.",
                "schema": {
                  "type": "string",
                  "example": "</wp-json/llms/v1/lessons?page=1>; rel=\"first\", </wp-json/llms/v1/lessons?page=2>; rel=\"prev\", </wp-json/llms/v1/lessons?page=4>; rel=\"next\", </wp-json/llms/v1/lessons?page=5>; rel=\"last\""
                }
              },
              "X-WP-Total": {
                "$ref": "#/components/headers/PaginationTotalResults"
              },
              "X-WP-TotalPages": {
                "$ref": "#/components/headers/PaginationTotalPages"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LessonResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request GET \\\n  --url 'https://example.tld/wp-json/llms/v1/lessons?context=edit&page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderby=SOME_STRING_VALUE&include=1%2C2%2C3&exclude=10%2C11%2C12&parent=987' \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.get( '/lessons?context=edit&page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderby=SOME_STRING_VALUE&include=1%2C2%2C3&exclude=10%2C11%2C12&parent=987', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "post": {
        "summary": "Create a lesson",
        "description": "Create a new lesson object.",
        "tags": [
          "Lessons"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LessonRequest"
                  },
                  {
                    "required": [
                      "title",
                      "content"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created the lesson.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LessonResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request POST \\\n  --url https://example.tld/wp-json/llms/v1/lessons \\\n  --user ck_XXXXXX:cs_XXXXXX \\\n  --header 'content-type: application/json' \\\n  --data '{\"title\":\"Getting Started with LifterLMS\",\"content\":\"<!-- wp:heading -->\\\\n<h2>Lorem ipsum dolor sit amet.</h2>\\\\n<!-- /wp:heading -->\\\\n\\\\n<!-- wp:paragraph -->\\\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>\\\\n<!-- /wp:paragraph -->\",\"excerpt\":\"Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.\",\"date_created\":\"2019-05-20 17:22:05\",\"date_created_gmt\":\"2019-05-20 13:22:05\",\"menu_order\":0,\"slug\":\"getting-started-with-lifterlms\",\"status\":\"publish\",\"password\":\"p4$sW0rd\",\"featured_media\":987,\"comment_status\":\"open\",\"ping_status\":\"open\",\"permalink\":\"https://example.com/lesson/getting-started-with-lifterlms\",\"post_type\":\"lesson\",\"audio_embed\":\"https://open.spotify.com/track/trackid\",\"video_embed\":\"https://www.youtube.com/watch?v=videoid\",\"prerequisite\":321,\"public\":false,\"parent_id\":987,\"points\":1,\"order\":1,\"drip_method\":\"none\",\"drip_days\":1,\"drip_date\":\"2019-12-12 23:23:59\",\"quiz\":{\"enabled\":true,\"id\":432,\"progression\":\"complete\"},\"assignment\":{\"enabled\":true,\"id\":876,\"progression\":\"complete\"}}'"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nconst postData = {\n  \"title\": \"Getting Started with LifterLMS\",\n  \"content\": \"<!-- wp:heading -->\\\\n<h2>Lorem ipsum dolor sit amet.</h2>\\\\n<!-- /wp:heading -->\\\\n\\\\n<!-- wp:paragraph -->\\\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>\\\\n<!-- /wp:paragraph -->\",\n  \"excerpt\": \"Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.\",\n  \"date_created\": \"2019-05-20 17:22:05\",\n  \"date_created_gmt\": \"2019-05-20 13:22:05\",\n  \"menu_order\": 0,\n  \"slug\": \"getting-started-with-lifterlms\",\n  \"status\": \"publish\",\n  \"password\": \"p4$sW0rd\",\n  \"featured_media\": 987,\n  \"comment_status\": \"open\",\n  \"ping_status\": \"open\",\n  \"permalink\": \"https://example.com/lesson/getting-started-with-lifterlms\",\n  \"post_type\": \"lesson\",\n  \"audio_embed\": \"https://open.spotify.com/track/trackid\",\n  \"video_embed\": \"https://www.youtube.com/watch?v=videoid\",\n  \"prerequisite\": 321,\n  \"public\": false,\n  \"parent_id\": 987,\n  \"points\": 1,\n  \"order\": 1,\n  \"drip_method\": \"none\",\n  \"drip_days\": 1,\n  \"drip_date\": \"2019-12-12 23:23:59\",\n  \"quiz\": {\n    \"enabled\": true,\n    \"id\": 432,\n    \"progression\": \"complete\"\n  },\n  \"assignment\": {\n    \"enabled\": true,\n    \"id\": 876,\n    \"progression\": \"complete\"\n  }\n};\n\nllms.post( '/lessons', postData, function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      }
    },
    "/lessons/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Unique lesson Identifier. The WordPress Post `ID`.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        }
      ],
      "get": {
        "summary": "Retrieve a lesson",
        "description": "Retrieve the details of an existing lesson.",
        "tags": [
          "Lessons"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Context"
          },
          {
            "$ref": "#/components/parameters/PostPassword"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the lesson.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LessonResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request GET \\\n  --url 'https://example.tld/wp-json/llms/v1/lessons/%7Bid%7D?context=edit&password=p4%24sW0rd' \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.get( '/lessons/%7Bid%7D?context=edit&password=p4%24sW0rd', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "post": {
        "summary": "Update a lesson",
        "description": "Update the specified lesson by setting the values of the parameters passed. Any parameters not provided will be left unchanged.",
        "tags": [
          "Lessons"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LessonRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the lesson.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LessonResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request POST \\\n  --url https://example.tld/wp-json/llms/v1/lessons/%7Bid%7D \\\n  --user ck_XXXXXX:cs_XXXXXX \\\n  --header 'content-type: application/json' \\\n  --data '{\"title\":\"Getting Started with LifterLMS\",\"content\":\"<!-- wp:heading -->\\\\n<h2>Lorem ipsum dolor sit amet.</h2>\\\\n<!-- /wp:heading -->\\\\n\\\\n<!-- wp:paragraph -->\\\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>\\\\n<!-- /wp:paragraph -->\",\"excerpt\":\"Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.\",\"date_created\":\"2019-05-20 17:22:05\",\"date_created_gmt\":\"2019-05-20 13:22:05\",\"menu_order\":0,\"slug\":\"getting-started-with-lifterlms\",\"status\":\"publish\",\"password\":\"p4$sW0rd\",\"featured_media\":987,\"comment_status\":\"open\",\"ping_status\":\"open\",\"permalink\":\"https://example.com/lesson/getting-started-with-lifterlms\",\"post_type\":\"lesson\",\"audio_embed\":\"https://open.spotify.com/track/trackid\",\"video_embed\":\"https://www.youtube.com/watch?v=videoid\",\"prerequisite\":321,\"public\":false,\"parent_id\":987,\"points\":1,\"order\":1,\"drip_method\":\"none\",\"drip_days\":1,\"drip_date\":\"2019-12-12 23:23:59\",\"quiz\":{\"enabled\":true,\"id\":432,\"progression\":\"complete\"},\"assignment\":{\"enabled\":true,\"id\":876,\"progression\":\"complete\"}}'"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nconst postData = {\n  \"title\": \"Getting Started with LifterLMS\",\n  \"content\": \"<!-- wp:heading -->\\\\n<h2>Lorem ipsum dolor sit amet.</h2>\\\\n<!-- /wp:heading -->\\\\n\\\\n<!-- wp:paragraph -->\\\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>\\\\n<!-- /wp:paragraph -->\",\n  \"excerpt\": \"Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.\",\n  \"date_created\": \"2019-05-20 17:22:05\",\n  \"date_created_gmt\": \"2019-05-20 13:22:05\",\n  \"menu_order\": 0,\n  \"slug\": \"getting-started-with-lifterlms\",\n  \"status\": \"publish\",\n  \"password\": \"p4$sW0rd\",\n  \"featured_media\": 987,\n  \"comment_status\": \"open\",\n  \"ping_status\": \"open\",\n  \"permalink\": \"https://example.com/lesson/getting-started-with-lifterlms\",\n  \"post_type\": \"lesson\",\n  \"audio_embed\": \"https://open.spotify.com/track/trackid\",\n  \"video_embed\": \"https://www.youtube.com/watch?v=videoid\",\n  \"prerequisite\": 321,\n  \"public\": false,\n  \"parent_id\": 987,\n  \"points\": 1,\n  \"order\": 1,\n  \"drip_method\": \"none\",\n  \"drip_days\": 1,\n  \"drip_date\": \"2019-12-12 23:23:59\",\n  \"quiz\": {\n    \"enabled\": true,\n    \"id\": 432,\n    \"progression\": \"complete\"\n  },\n  \"assignment\": {\n    \"enabled\": true,\n    \"id\": 876,\n    \"progression\": \"complete\"\n  }\n};\n\nllms.post( '/lessons/%7Bid%7D', postData, function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "delete": {
        "summary": "Delete a lesson",
        "description": "Delete an existing lesson.",
        "tags": [
          "Lessons"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "description": "Bypass the trash and force lesson deletion.",
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully moved the lesson to the trash.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/LessonResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "default": "trash"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "204": {
            "description": "Successfully deleted the lesson."
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request DELETE \\\n  --url https://example.tld/wp-json/llms/v1/lessons/%7Bid%7D \\\n  --user ck_XXXXXX:cs_XXXXXX \\\n  --header 'content-type: application/json' \\\n  --data '{\"force\":false}'"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nconst postData = {\n  \"force\": false\n};\n\nllms.delete( '/lessons/%7Bid%7D', postData, function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      }
    },
    "/memberships": {
      "get": {
        "summary": "List memberships",
        "description": "Retrieve a list of memberships.",
        "tags": [
          "Memberships"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Context"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Order"
          },
          {
            "name": "orderby",
            "description": "Specify the sort field for a collection of results.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "title",
                "date_created",
                "date_updated",
                "menu_order"
              ],
              "default": "id"
            }
          },
          {
            "$ref": "#/components/parameters/Include"
          },
          {
            "$ref": "#/components/parameters/Exclude"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned a list of memberships.",
            "headers": {
              "Link": {
                "description": "Pagination links for the collection.",
                "schema": {
                  "type": "string",
                  "example": "</wp-json/llms/v1/memberships?page=1>; rel=\"first\", </wp-json/llms/v1/memberships?page=2>; rel=\"prev\", </wp-json/llms/v1/memberships?page=4>; rel=\"next\", </wp-json/llms/v1/memberships?page=5>; rel=\"last\""
                }
              },
              "X-WP-Total": {
                "$ref": "#/components/headers/PaginationTotalResults"
              },
              "X-WP-TotalPages": {
                "$ref": "#/components/headers/PaginationTotalPages"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MembershipResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request GET \\\n  --url 'https://example.tld/wp-json/llms/v1/memberships?context=edit&page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderby=SOME_STRING_VALUE&include=1%2C2%2C3&exclude=10%2C11%2C12' \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.get( '/memberships?context=edit&page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderby=SOME_STRING_VALUE&include=1%2C2%2C3&exclude=10%2C11%2C12', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "post": {
        "summary": "Create a membership",
        "description": "Create a new membership object.",
        "tags": [
          "Memberships"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MembershipRequest"
                  },
                  {
                    "required": [
                      "title",
                      "content"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created the membership.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MembershipResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request POST \\\n  --url https://example.tld/wp-json/llms/v1/memberships \\\n  --user ck_XXXXXX:cs_XXXXXX \\\n  --header 'content-type: application/json' \\\n  --data '{\"title\":\"Getting Started with LifterLMS\",\"content\":\"<!-- wp:heading -->\\\\n<h2>Lorem ipsum dolor sit amet.</h2>\\\\n<!-- /wp:heading -->\\\\n\\\\n<!-- wp:paragraph -->\\\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>\\\\n<!-- /wp:paragraph -->\",\"excerpt\":\"Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.\",\"restriction_message\":\"You must belong to the [lifterlms_membership_link id=\\\"1234\\\"] membership to access this content.\",\"date_created\":\"2019-05-20 17:22:05\",\"date_created_gmt\":\"2019-05-20 13:22:05\",\"menu_order\":0,\"slug\":\"getting-started-with-lifterlms\",\"status\":\"publish\",\"password\":\"p4$sW0rd\",\"featured_media\":987,\"comment_status\":\"open\",\"ping_status\":\"open\",\"permalink\":\"https://example.com/membership/getting-started-with-lifterlms\",\"post_type\":\"llms_membership\",\"categories\":[1,2,3],\"tags\":[4,5,6],\"restriction_action\":\"none\",\"restriction_page_id\":456,\"restriction_url\":\"https://example.tld/my-custom-url\",\"auto_enroll\":[456,789],\"catalog_visibility\":\"catalog_search\",\"instructors\":[1,2,3],\"sales_page_type\":\"none\",\"sales_page_page_id\":543,\"sales_page_url\":\"https://example.tld/custom-sales-page\"}'"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nconst postData = {\n  \"title\": \"Getting Started with LifterLMS\",\n  \"content\": \"<!-- wp:heading -->\\\\n<h2>Lorem ipsum dolor sit amet.</h2>\\\\n<!-- /wp:heading -->\\\\n\\\\n<!-- wp:paragraph -->\\\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>\\\\n<!-- /wp:paragraph -->\",\n  \"excerpt\": \"Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.\",\n  \"restriction_message\": \"You must belong to the [lifterlms_membership_link id=\\\"1234\\\"] membership to access this content.\",\n  \"date_created\": \"2019-05-20 17:22:05\",\n  \"date_created_gmt\": \"2019-05-20 13:22:05\",\n  \"menu_order\": 0,\n  \"slug\": \"getting-started-with-lifterlms\",\n  \"status\": \"publish\",\n  \"password\": \"p4$sW0rd\",\n  \"featured_media\": 987,\n  \"comment_status\": \"open\",\n  \"ping_status\": \"open\",\n  \"permalink\": \"https://example.com/membership/getting-started-with-lifterlms\",\n  \"post_type\": \"llms_membership\",\n  \"categories\": [\n    1,\n    2,\n    3\n  ],\n  \"tags\": [\n    4,\n    5,\n    6\n  ],\n  \"restriction_action\": \"none\",\n  \"restriction_page_id\": 456,\n  \"restriction_url\": \"https://example.tld/my-custom-url\",\n  \"auto_enroll\": [\n    456,\n    789\n  ],\n  \"catalog_visibility\": \"catalog_search\",\n  \"instructors\": [\n    1,\n    2,\n    3\n  ],\n  \"sales_page_type\": \"none\",\n  \"sales_page_page_id\": 543,\n  \"sales_page_url\": \"https://example.tld/custom-sales-page\"\n};\n\nllms.post( '/memberships', postData, function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      }
    },
    "/memberships/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Unique membership Identifier. The WordPress Post `ID`.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        }
      ],
      "get": {
        "summary": "Retrieve a membership",
        "description": "Retrieve the details of an existing membership.",
        "tags": [
          "Memberships"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Context"
          },
          {
            "$ref": "#/components/parameters/PostPassword"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the membership.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MembershipResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request GET \\\n  --url 'https://example.tld/wp-json/llms/v1/memberships/%7Bid%7D?context=edit&password=p4%24sW0rd' \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.get( '/memberships/%7Bid%7D?context=edit&password=p4%24sW0rd', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "post": {
        "summary": "Update a membership",
        "description": "Update the specified membership by setting the values of the parameters passed. Any parameters not provided will be left unchanged.",
        "tags": [
          "Memberships"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MembershipRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the membership.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MembershipResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request POST \\\n  --url https://example.tld/wp-json/llms/v1/memberships/%7Bid%7D \\\n  --user ck_XXXXXX:cs_XXXXXX \\\n  --header 'content-type: application/json' \\\n  --data '{\"title\":\"Getting Started with LifterLMS\",\"content\":\"<!-- wp:heading -->\\\\n<h2>Lorem ipsum dolor sit amet.</h2>\\\\n<!-- /wp:heading -->\\\\n\\\\n<!-- wp:paragraph -->\\\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>\\\\n<!-- /wp:paragraph -->\",\"excerpt\":\"Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.\",\"restriction_message\":\"You must belong to the [lifterlms_membership_link id=\\\"1234\\\"] membership to access this content.\",\"date_created\":\"2019-05-20 17:22:05\",\"date_created_gmt\":\"2019-05-20 13:22:05\",\"menu_order\":0,\"slug\":\"getting-started-with-lifterlms\",\"status\":\"publish\",\"password\":\"p4$sW0rd\",\"featured_media\":987,\"comment_status\":\"open\",\"ping_status\":\"open\",\"permalink\":\"https://example.com/membership/getting-started-with-lifterlms\",\"post_type\":\"llms_membership\",\"categories\":[1,2,3],\"tags\":[4,5,6],\"restriction_action\":\"none\",\"restriction_page_id\":456,\"restriction_url\":\"https://example.tld/my-custom-url\",\"auto_enroll\":[456,789],\"catalog_visibility\":\"catalog_search\",\"instructors\":[1,2,3],\"sales_page_type\":\"none\",\"sales_page_page_id\":543,\"sales_page_url\":\"https://example.tld/custom-sales-page\"}'"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nconst postData = {\n  \"title\": \"Getting Started with LifterLMS\",\n  \"content\": \"<!-- wp:heading -->\\\\n<h2>Lorem ipsum dolor sit amet.</h2>\\\\n<!-- /wp:heading -->\\\\n\\\\n<!-- wp:paragraph -->\\\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>\\\\n<!-- /wp:paragraph -->\",\n  \"excerpt\": \"Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.\",\n  \"restriction_message\": \"You must belong to the [lifterlms_membership_link id=\\\"1234\\\"] membership to access this content.\",\n  \"date_created\": \"2019-05-20 17:22:05\",\n  \"date_created_gmt\": \"2019-05-20 13:22:05\",\n  \"menu_order\": 0,\n  \"slug\": \"getting-started-with-lifterlms\",\n  \"status\": \"publish\",\n  \"password\": \"p4$sW0rd\",\n  \"featured_media\": 987,\n  \"comment_status\": \"open\",\n  \"ping_status\": \"open\",\n  \"permalink\": \"https://example.com/membership/getting-started-with-lifterlms\",\n  \"post_type\": \"llms_membership\",\n  \"categories\": [\n    1,\n    2,\n    3\n  ],\n  \"tags\": [\n    4,\n    5,\n    6\n  ],\n  \"restriction_action\": \"none\",\n  \"restriction_page_id\": 456,\n  \"restriction_url\": \"https://example.tld/my-custom-url\",\n  \"auto_enroll\": [\n    456,\n    789\n  ],\n  \"catalog_visibility\": \"catalog_search\",\n  \"instructors\": [\n    1,\n    2,\n    3\n  ],\n  \"sales_page_type\": \"none\",\n  \"sales_page_page_id\": 543,\n  \"sales_page_url\": \"https://example.tld/custom-sales-page\"\n};\n\nllms.post( '/memberships/%7Bid%7D', postData, function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "delete": {
        "summary": "Delete a membership",
        "description": "Delete an existing membership.",
        "tags": [
          "Memberships"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "description": "Bypass the trash and force membership deletion.",
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully moved the membership to the trash.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/MembershipResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "default": "trash"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "204": {
            "description": "Successfully deleted the membership."
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request DELETE \\\n  --url https://example.tld/wp-json/llms/v1/memberships/%7Bid%7D \\\n  --user ck_XXXXXX:cs_XXXXXX \\\n  --header 'content-type: application/json' \\\n  --data '{\"force\":false}'"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nconst postData = {\n  \"force\": false\n};\n\nllms.delete( '/memberships/%7Bid%7D', postData, function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      }
    },
    "/memberships/{id}/enrollments": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Unique membership Identifier. The WordPress Post `ID`.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        }
      ],
      "get": {
        "summary": "List membership enrollments",
        "description": "Retrieve a collection of an existing membership's enrollments.",
        "tags": [
          "Memberships"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Context"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Order"
          },
          {
            "name": "orderby",
            "description": "Specify the sort field for the collection of results.",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "date_updated",
                "date_created"
              ],
              "default": "date_updated"
            }
          },
          {
            "$ref": "#/components/parameters/Include"
          },
          {
            "name": "status",
            "description": "Filter results to records matching the specified status.",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/EnrollmentStatus"
            }
          },
          {
            "name": "student",
            "in": "query",
            "description": "Limit results to a specific student or a list of students. Accepts a single student `id` or a comma separated list of student `id`s.",
            "schema": {
              "type": "string",
              "example": [
                1,
                2,
                3
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the membership's enrollments.",
            "headers": {
              "Link": {
                "description": "Pagination links for the collection.",
                "schema": {
                  "type": "string",
                  "example": "</wp-json/llms/v1/memberships/1234/enrollments?page=1>; rel=\"first\", </wp-json/llms/v1/memberships/1234/enrollments?page=2>; rel=\"prev\", </wp-json/llms/v1/memberships/1234/enrollments?page=4>; rel=\"next\", </wp-json/llms/v1/memberships/1234/enrollments?page=5>; rel=\"last\""
                }
              },
              "X-WP-Total": {
                "$ref": "#/components/headers/PaginationTotalResults"
              },
              "X-WP-TotalPages": {
                "$ref": "#/components/headers/PaginationTotalPages"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Enrollment"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request GET \\\n  --url 'https://example.tld/wp-json/llms/v1/memberships/%7Bid%7D/enrollments?context=edit&page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderby=SOME_STRING_VALUE&include=1%2C2%2C3&status=SOME_STRING_VALUE&student=1%2C2%2C3' \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.get( '/memberships/%7Bid%7D/enrollments?context=edit&page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderby=SOME_STRING_VALUE&include=1%2C2%2C3&status=SOME_STRING_VALUE&student=1%2C2%2C3', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      }
    },
    "/quiz-questions": {
      "get": {
        "summary": "List quiz questions",
        "description": "Retrieve a list of quiz questions.",
        "tags": [
          "Quiz Questions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Context"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Order"
          },
          {
            "name": "orderby",
            "description": "Specify the sort field for a collection of results.",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "title",
                "date_created",
                "date_updated"
              ],
              "default": "id"
            }
          },
          {
            "$ref": "#/components/parameters/Include"
          },
          {
            "$ref": "#/components/parameters/Exclude"
          },
          {
            "name": "quiz",
            "description": "Filter quiz questions by the parent post (quiz) ID.",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "example": 789
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned a list of quiz questions.",
            "headers": {
              "Link": {
                "description": "Pagination links for the collection.",
                "schema": {
                  "type": "string",
                  "example": "</wp-json/llms/v1/quiz-questions?page=1>; rel=\"first\", </wp-json/llms/v1/quiz-questions?page=2>; rel=\"prev\", </wp-json/llms/v1/quiz-questions?page=4>; rel=\"next\", </wp-json/llms/v1/quiz-questions?page=5>; rel=\"last\""
                }
              },
              "X-WP-Total": {
                "$ref": "#/components/headers/PaginationTotalResults"
              },
              "X-WP-TotalPages": {
                "$ref": "#/components/headers/PaginationTotalPages"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QuizQuestionTypesResponseList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request GET \\\n  --url 'https://example.tld/wp-json/llms/v1/quiz-questions?context=edit&page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderby=SOME_STRING_VALUE&include=1%2C2%2C3&exclude=10%2C11%2C12&quiz=789' \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.get( '/quiz-questions?context=edit&page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderby=SOME_STRING_VALUE&include=1%2C2%2C3&exclude=10%2C11%2C12&quiz=789', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "post": {
        "summary": "Create a quiz question",
        "description": "Create a new quiz question object.",
        "tags": [
          "Quiz Questions"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "title": "Multiple Choice",
                    "allOf": [
                      {
                        "required": [
                          "title",
                          "choices",
                          "question_type"
                        ]
                      },
                      {
                        "$ref": "#/components/schemas/QuizQuestionTypeChoice"
                      },
                      {
                        "$ref": "#/components/schemas/QuizQuestionRequest"
                      }
                    ]
                  },
                  {
                    "title": "Picture Choice",
                    "allOf": [
                      {
                        "required": [
                          "title",
                          "choices",
                          "question_type"
                        ]
                      },
                      {
                        "$ref": "#/components/schemas/QuizQuestionTypePictureChoice"
                      },
                      {
                        "$ref": "#/components/schemas/QuizQuestionRequest"
                      }
                    ]
                  },
                  {
                    "title": "True / False",
                    "allOf": [
                      {
                        "required": [
                          "title",
                          "choices",
                          "question_type"
                        ]
                      },
                      {
                        "$ref": "#/components/schemas/QuizQuestionTypeTrueFalse"
                      },
                      {
                        "$ref": "#/components/schemas/QuizQuestionRequest"
                      }
                    ]
                  },
                  {
                    "title": "Content",
                    "allOf": [
                      {
                        "required": [
                          "title",
                          "question_type"
                        ]
                      },
                      {
                        "$ref": "#/components/schemas/QuizQuestionTypeContent"
                      },
                      {
                        "$ref": "#/components/schemas/QuizQuestionRequest"
                      }
                    ]
                  },
                  {
                    "title": "Fill in the Blank",
                    "allOf": [
                      {
                        "required": [
                          "title",
                          "question_type"
                        ]
                      },
                      {
                        "$ref": "#/components/schemas/QuizQuestionTypeBlank"
                      },
                      {
                        "$ref": "#/components/schemas/QuizQuestionRequest"
                      }
                    ]
                  },
                  {
                    "title": "Long Answer",
                    "allOf": [
                      {
                        "required": [
                          "title",
                          "question_type"
                        ]
                      },
                      {
                        "$ref": "#/components/schemas/QuizQuestionTypeLongAnswer"
                      },
                      {
                        "$ref": "#/components/schemas/QuizQuestionRequest"
                      }
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created the quiz question.",
            "content": {
              "application/json": {
                "examples": {
                  "choice": {
                    "summary": "Multiple Choice Question",
                    "value": {}
                  },
                  "long_answer": {
                    "summary": "Long Answer Question",
                    "value": {}
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/QuizQuestionTypesResponseList"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request POST \\\n  --url https://example.tld/wp-json/llms/v1/quiz-questions \\\n  --user ck_XXXXXX:cs_XXXXXX \\\n  --header 'content-type: application/json' \\\n  --data '{\"date_created\":\"2019-05-20 17:22:05\",\"date_created_gmt\":\"2019-05-20 13:22:05\",\"order\":1,\"parent_id\":234,\"points\":10,\"video_embed\":\"https://www.youtube.com/watch?v=videoid\",\"featured_media\":205,\"question_type\":\"choice\",\"choices\":[{\"marker\":\"A\",\"choice\":\"Red\",\"correct\":false},{\"marker\":\"B\",\"choice\":\"Green\",\"correct\":true}],\"multi_choices\":false,\"title\":\"What is your favorite color?\",\"content\":\"<h2>Lorem ipsum dolor sit amet.</h2>\\\\n\\\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>\",\"answer_clarification\":\"<h2>Lorem ipsum dolor sit amet.</h2>\\\\n\\\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>\"}'"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nconst postData = {\n  \"date_created\": \"2019-05-20 17:22:05\",\n  \"date_created_gmt\": \"2019-05-20 13:22:05\",\n  \"order\": 1,\n  \"parent_id\": 234,\n  \"points\": 10,\n  \"video_embed\": \"https://www.youtube.com/watch?v=videoid\",\n  \"featured_media\": 205,\n  \"question_type\": \"choice\",\n  \"choices\": [\n    {\n      \"marker\": \"A\",\n      \"choice\": \"Red\",\n      \"correct\": false\n    },\n    {\n      \"marker\": \"B\",\n      \"choice\": \"Green\",\n      \"correct\": true\n    }\n  ],\n  \"multi_choices\": false,\n  \"title\": \"What is your favorite color?\",\n  \"content\": \"<h2>Lorem ipsum dolor sit amet.</h2>\\\\n\\\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>\",\n  \"answer_clarification\": \"<h2>Lorem ipsum dolor sit amet.</h2>\\\\n\\\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>\"\n};\n\nllms.post( '/quiz-questions', postData, function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      }
    },
    "/quiz-questions/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Unique quiz question identifier. The WordPress Post `ID`.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        }
      ],
      "get": {
        "summary": "Retrieve a quiz question",
        "description": "Retrieve the details of an existing quiz question.",
        "tags": [
          "Quiz Questions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Context"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the quiz question.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuizQuestionTypesResponseList"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request GET \\\n  --url 'https://example.tld/wp-json/llms/v1/quiz-questions/%7Bid%7D?context=edit' \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.get( '/quiz-questions/%7Bid%7D?context=edit', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "post": {
        "summary": "Update a quiz question",
        "description": "Update the specified quiz question by setting the values of the parameters passed. Any parameters not provided will be left unchanged.",
        "tags": [
          "Quiz Questions"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "title": "Multiple Choice",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/QuizQuestionTypeChoice"
                      },
                      {
                        "$ref": "#/components/schemas/QuizQuestionRequest"
                      }
                    ]
                  },
                  {
                    "title": "Picture Choice",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/QuizQuestionTypePictureChoice"
                      },
                      {
                        "$ref": "#/components/schemas/QuizQuestionRequest"
                      }
                    ]
                  },
                  {
                    "title": "True / False",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/QuizQuestionTypeTrueFalse"
                      },
                      {
                        "$ref": "#/components/schemas/QuizQuestionRequest"
                      }
                    ]
                  },
                  {
                    "title": "Content",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/QuizQuestionTypeContent"
                      },
                      {
                        "$ref": "#/components/schemas/QuizQuestionRequest"
                      }
                    ]
                  },
                  {
                    "title": "Fill in the Blank",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/QuizQuestionTypeBlank"
                      },
                      {
                        "$ref": "#/components/schemas/QuizQuestionRequest"
                      }
                    ]
                  },
                  {
                    "title": "Long Answer",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/QuizQuestionTypeLongAnswer"
                      },
                      {
                        "$ref": "#/components/schemas/QuizQuestionRequest"
                      }
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the quiz question.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuizQuestionTypesResponseList"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request POST \\\n  --url https://example.tld/wp-json/llms/v1/quiz-questions/%7Bid%7D \\\n  --user ck_XXXXXX:cs_XXXXXX \\\n  --header 'content-type: application/json' \\\n  --data '{\"date_created\":\"2019-05-20 17:22:05\",\"date_created_gmt\":\"2019-05-20 13:22:05\",\"order\":1,\"parent_id\":234,\"points\":10,\"video_embed\":\"https://www.youtube.com/watch?v=videoid\",\"featured_media\":205,\"question_type\":\"choice\",\"choices\":[{\"marker\":\"A\",\"choice\":\"Red\",\"correct\":false},{\"marker\":\"B\",\"choice\":\"Green\",\"correct\":true}],\"multi_choices\":false,\"title\":\"What is your favorite color?\",\"content\":\"<h2>Lorem ipsum dolor sit amet.</h2>\\\\n\\\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>\",\"answer_clarification\":\"<h2>Lorem ipsum dolor sit amet.</h2>\\\\n\\\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>\"}'"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nconst postData = {\n  \"date_created\": \"2019-05-20 17:22:05\",\n  \"date_created_gmt\": \"2019-05-20 13:22:05\",\n  \"order\": 1,\n  \"parent_id\": 234,\n  \"points\": 10,\n  \"video_embed\": \"https://www.youtube.com/watch?v=videoid\",\n  \"featured_media\": 205,\n  \"question_type\": \"choice\",\n  \"choices\": [\n    {\n      \"marker\": \"A\",\n      \"choice\": \"Red\",\n      \"correct\": false\n    },\n    {\n      \"marker\": \"B\",\n      \"choice\": \"Green\",\n      \"correct\": true\n    }\n  ],\n  \"multi_choices\": false,\n  \"title\": \"What is your favorite color?\",\n  \"content\": \"<h2>Lorem ipsum dolor sit amet.</h2>\\\\n\\\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>\",\n  \"answer_clarification\": \"<h2>Lorem ipsum dolor sit amet.</h2>\\\\n\\\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>\"\n};\n\nllms.post( '/quiz-questions/%7Bid%7D', postData, function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "delete": {
        "summary": "Delete a quiz question",
        "description": "Delete an existing quiz question.",
        "tags": [
          "Quiz Questions"
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the quiz question."
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request DELETE \\\n  --url https://example.tld/wp-json/llms/v1/quiz-questions/%7Bid%7D \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.delete( '/quiz-questions/%7Bid%7D', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      }
    },
    "/quizzes": {
      "get": {
        "summary": "List quizzes",
        "description": "Retrieve a list of quizzes.",
        "tags": [
          "Quizzes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Context"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Order"
          },
          {
            "name": "orderby",
            "description": "Specify the sort field for a collection of results.",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "title",
                "date_created",
                "date_updated"
              ],
              "default": "id"
            }
          },
          {
            "$ref": "#/components/parameters/Include"
          },
          {
            "$ref": "#/components/parameters/Exclude"
          },
          {
            "name": "parent",
            "description": "Filter quizzes by the parent post (lesson) ID.",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "example": 789
            }
          },
          {
            "name": "course",
            "description": "Filter quizzes by the parent couse ID.",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "example": 1234
            }
          },
          {
            "name": "status",
            "description": "Filter quizzes by the post status.",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "publish",
                "draft"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned a list of quizzes.",
            "headers": {
              "Link": {
                "description": "Pagination links for the collection.",
                "schema": {
                  "type": "string",
                  "example": "</wp-json/llms/v1/quizzes?page=1>; rel=\"first\", </wp-json/llms/v1/quizzes?page=2>; rel=\"prev\", </wp-json/llms/v1/quizzes?page=4>; rel=\"next\", </wp-json/llms/v1/quizzes?page=5>; rel=\"last\""
                }
              },
              "X-WP-Total": {
                "$ref": "#/components/headers/PaginationTotalResults"
              },
              "X-WP-TotalPages": {
                "$ref": "#/components/headers/PaginationTotalPages"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QuizResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request GET \\\n  --url 'https://example.tld/wp-json/llms/v1/quizzes?context=edit&page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderby=SOME_STRING_VALUE&include=1%2C2%2C3&exclude=10%2C11%2C12&parent=789&course=1234&status=SOME_STRING_VALUE' \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.get( '/quizzes?context=edit&page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderby=SOME_STRING_VALUE&include=1%2C2%2C3&exclude=10%2C11%2C12&parent=789&course=1234&status=SOME_STRING_VALUE', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "post": {
        "summary": "Create a quiz",
        "description": "Create a new quiz object.",
        "tags": [
          "Quizzes"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/QuizRequest"
                  },
                  {
                    "required": [
                      "title",
                      "content"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created the quiz.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuizResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request POST \\\n  --url https://example.tld/wp-json/llms/v1/quizzes \\\n  --user ck_XXXXXX:cs_XXXXXX \\\n  --header 'content-type: application/json' \\\n  --data '{\"date_created\":\"2019-05-20 17:22:05\",\"date_created_gmt\":\"2019-05-20 13:22:05\",\"slug\":\"final-exam\",\"status\":\"draft\",\"attempt_limiting\":true,\"attempts_allowed\":1,\"time_limiting\":true,\"time_limit\":90,\"passing_percentage\":65,\"show_correct_answer\":false,\"randomize_questions\":false,\"parent_id\":789,\"title\":\"Final Exam\",\"content\":\"<h2>Lorem ipsum dolor sit amet.</h2>\\\\n\\\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>\"}'"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nconst postData = {\n  \"date_created\": \"2019-05-20 17:22:05\",\n  \"date_created_gmt\": \"2019-05-20 13:22:05\",\n  \"slug\": \"final-exam\",\n  \"status\": \"draft\",\n  \"attempt_limiting\": true,\n  \"attempts_allowed\": 1,\n  \"time_limiting\": true,\n  \"time_limit\": 90,\n  \"passing_percentage\": 65,\n  \"show_correct_answer\": false,\n  \"randomize_questions\": false,\n  \"parent_id\": 789,\n  \"title\": \"Final Exam\",\n  \"content\": \"<h2>Lorem ipsum dolor sit amet.</h2>\\\\n\\\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>\"\n};\n\nllms.post( '/quizzes', postData, function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      }
    },
    "/quizzes/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Unique Quiz Identifier. The WordPress Post `ID`.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        }
      ],
      "get": {
        "summary": "Retrieve a quiz",
        "description": "Retrieve the details of an existing quiz.",
        "tags": [
          "Quizzes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Context"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the quiz.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuizResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request GET \\\n  --url 'https://example.tld/wp-json/llms/v1/quizzes/%7Bid%7D?context=edit' \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.get( '/quizzes/%7Bid%7D?context=edit', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "post": {
        "summary": "Update a quiz",
        "description": "Update the specified quiz by setting the values of the parameters passed. Any parameters not provided will be left unchanged.",
        "tags": [
          "Quizzes"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuizRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the quiz.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuizResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request POST \\\n  --url https://example.tld/wp-json/llms/v1/quizzes/%7Bid%7D \\\n  --user ck_XXXXXX:cs_XXXXXX \\\n  --header 'content-type: application/json' \\\n  --data '{\"date_created\":\"2019-05-20 17:22:05\",\"date_created_gmt\":\"2019-05-20 13:22:05\",\"slug\":\"final-exam\",\"status\":\"draft\",\"attempt_limiting\":true,\"attempts_allowed\":1,\"time_limiting\":true,\"time_limit\":90,\"passing_percentage\":65,\"show_correct_answer\":false,\"randomize_questions\":false,\"parent_id\":789,\"title\":\"Final Exam\",\"content\":\"<h2>Lorem ipsum dolor sit amet.</h2>\\\\n\\\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>\"}'"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nconst postData = {\n  \"date_created\": \"2019-05-20 17:22:05\",\n  \"date_created_gmt\": \"2019-05-20 13:22:05\",\n  \"slug\": \"final-exam\",\n  \"status\": \"draft\",\n  \"attempt_limiting\": true,\n  \"attempts_allowed\": 1,\n  \"time_limiting\": true,\n  \"time_limit\": 90,\n  \"passing_percentage\": 65,\n  \"show_correct_answer\": false,\n  \"randomize_questions\": false,\n  \"parent_id\": 789,\n  \"title\": \"Final Exam\",\n  \"content\": \"<h2>Lorem ipsum dolor sit amet.</h2>\\\\n\\\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>\"\n};\n\nllms.post( '/quizzes/%7Bid%7D', postData, function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "delete": {
        "summary": "Delete a quiz",
        "description": "Delete an existing quiz.",
        "tags": [
          "Quizzes"
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the quiz."
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request DELETE \\\n  --url https://example.tld/wp-json/llms/v1/quizzes/%7Bid%7D \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.delete( '/quizzes/%7Bid%7D', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      }
    },
    "/sections": {
      "get": {
        "summary": "List sections",
        "description": "Retrieve a list of sections.",
        "tags": [
          "Sections"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Context"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Order"
          },
          {
            "name": "orderby",
            "description": "Specify the sort field for a collection of results.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "title",
                "date_created",
                "date_updated",
                "order"
              ],
              "default": "id"
            }
          },
          {
            "$ref": "#/components/parameters/Include"
          },
          {
            "$ref": "#/components/parameters/Exclude"
          },
          {
            "name": "parent",
            "description": "Filter sections by the parent post (course) ID.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "example": 1234
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned a list of sections.",
            "headers": {
              "Link": {
                "description": "Pagination links for the collection.",
                "schema": {
                  "type": "string",
                  "example": "</wp-json/llms/v1/sections?page=1>; rel=\"first\", </wp-json/llms/v1/sections?page=2>; rel=\"prev\", </wp-json/llms/v1/sections?page=4>; rel=\"next\", </wp-json/llms/v1/sections?page=5>; rel=\"last\""
                }
              },
              "X-WP-Total": {
                "$ref": "#/components/headers/PaginationTotalResults"
              },
              "X-WP-TotalPages": {
                "$ref": "#/components/headers/PaginationTotalPages"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SectionResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request GET \\\n  --url 'https://example.tld/wp-json/llms/v1/sections?context=edit&page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderby=SOME_STRING_VALUE&include=1%2C2%2C3&exclude=10%2C11%2C12&parent=1234' \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.get( '/sections?context=edit&page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderby=SOME_STRING_VALUE&include=1%2C2%2C3&exclude=10%2C11%2C12&parent=1234', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "post": {
        "summary": "Create a section",
        "description": "Create a new section object.",
        "tags": [
          "Sections"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SectionRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created the section.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectionResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request POST \\\n  --url https://example.tld/wp-json/llms/v1/sections \\\n  --user ck_XXXXXX:cs_XXXXXX \\\n  --header 'content-type: application/json' \\\n  --data '{\"title\":\"Getting Started with LifterLMS\",\"date_created\":\"2019-05-20 17:22:05\",\"date_created_gmt\":\"2019-05-20 13:22:05\",\"order\":1,\"parent_id\":1234}'"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nconst postData = {\n  \"title\": \"Getting Started with LifterLMS\",\n  \"date_created\": \"2019-05-20 17:22:05\",\n  \"date_created_gmt\": \"2019-05-20 13:22:05\",\n  \"order\": 1,\n  \"parent_id\": 1234\n};\n\nllms.post( '/sections', postData, function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      }
    },
    "/sections/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Unique Section Identifier. The WordPress Post `ID`.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        }
      ],
      "get": {
        "summary": "Retrieve a section",
        "description": "Retrieve the details of an existing section.",
        "tags": [
          "Sections"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Context"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the section.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectionResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request GET \\\n  --url 'https://example.tld/wp-json/llms/v1/sections/%7Bid%7D?context=edit' \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.get( '/sections/%7Bid%7D?context=edit', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "post": {
        "summary": "Update a section",
        "description": "Update the specified section by setting the values of the parameters passed. Any parameters not provided will be left unchanged.",
        "tags": [
          "Sections"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SectionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the section.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectionResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request POST \\\n  --url https://example.tld/wp-json/llms/v1/sections/%7Bid%7D \\\n  --user ck_XXXXXX:cs_XXXXXX \\\n  --header 'content-type: application/json' \\\n  --data '{\"title\":\"Getting Started with LifterLMS\",\"date_created\":\"2019-05-20 17:22:05\",\"date_created_gmt\":\"2019-05-20 13:22:05\",\"order\":1,\"parent_id\":1234}'"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nconst postData = {\n  \"title\": \"Getting Started with LifterLMS\",\n  \"date_created\": \"2019-05-20 17:22:05\",\n  \"date_created_gmt\": \"2019-05-20 13:22:05\",\n  \"order\": 1,\n  \"parent_id\": 1234\n};\n\nllms.post( '/sections/%7Bid%7D', postData, function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "delete": {
        "summary": "Delete a section",
        "description": "Delete an existing section.",
        "tags": [
          "Sections"
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the section."
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request DELETE \\\n  --url https://example.tld/wp-json/llms/v1/sections/%7Bid%7D \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.delete( '/sections/%7Bid%7D', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      }
    },
    "/sections/{id}/content": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Unique section Identifier. The WordPress Post `ID`.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        }
      ],
      "get": {
        "summary": "List section content",
        "description": "Retrieve a collection of an existing section's content.",
        "tags": [
          "Sections"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Context"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Order"
          },
          {
            "name": "orderby",
            "description": "Specify the sort field for a collection of results.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "order",
                "id",
                "title"
              ],
              "default": "order"
            }
          },
          {
            "$ref": "#/components/parameters/Include"
          },
          {
            "name": "parent",
            "description": "Filter results to those belonging to the specified parent.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "example": 987
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the section contents.",
            "headers": {
              "Link": {
                "description": "Pagination links for the collection.",
                "schema": {
                  "type": "string",
                  "example": "</wp-json/llms/v1/sections/1234/content/?page=1>; rel=\"first\", </wp-json/llms/v1/sections/1234/content/?page=2>; rel=\"prev\", </wp-json/llms/v1/sections/1234/content/?page=4>; rel=\"next\", </wp-json/llms/v1/sections/1234/content/?page=5>; rel=\"last\""
                }
              },
              "X-WP-Total": {
                "$ref": "#/components/headers/PaginationTotalResults"
              },
              "X-WP-TotalPages": {
                "$ref": "#/components/headers/PaginationTotalPages"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LessonResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request GET \\\n  --url 'https://example.tld/wp-json/llms/v1/sections/%7Bid%7D/content?context=edit&page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderby=SOME_STRING_VALUE&include=1%2C2%2C3&parent=987' \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.get( '/sections/%7Bid%7D/content?context=edit&page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderby=SOME_STRING_VALUE&include=1%2C2%2C3&parent=987', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      }
    },
    "/students": {
      "get": {
        "summary": "List students",
        "description": "Retrieves a list of all students.",
        "tags": [
          "Students"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Context"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Order"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/SearchColumns"
          },
          {
            "name": "orderby",
            "description": "Specify the sort field for a collection of results.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "email",
                "name",
                "registered_date"
              ],
              "default": "id"
            }
          },
          {
            "$ref": "#/components/parameters/Include"
          },
          {
            "$ref": "#/components/parameters/Exclude"
          },
          {
            "name": "enrolled_in",
            "description": "Retrieve only students not enrolled in the specified course(s) and/or\nmembership(s).\n\nAccepts a single WP Post ID or a comma separated list of IDs.\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": [
                1,
                2,
                3
              ]
            }
          },
          {
            "name": "enrolled_not_in",
            "description": "Retrieve only students not enrolled in the specified course(s) and/or\nmembership(s).\n\nAccepts a single WP Post ID or a comma separated list of IDs.\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": [
                4,
                5,
                6
              ]
            }
          },
          {
            "name": "roles",
            "description": "Retrieve students by a specific role.\n\nAccepts a single role name or a comma separated list of role names.\n",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": [
                "student",
                "customer"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned a list of students",
            "headers": {
              "Link": {
                "description": "Pagination links for the collection.",
                "schema": {
                  "type": "string",
                  "example": "</wp-json/llms/v1/students?page=1>; rel=\"first\",\n</wp-json/llms/v1/students?page=2>; rel=\"prev\",\n</wp-json/llms/v1/students?page=4>; rel=\"next\",\n</wp-json/llms/v1/students?page=5>; rel=\"last\"\n"
                }
              },
              "X-WP-Total": {
                "$ref": "#/components/headers/PaginationTotalResults"
              },
              "X-WP-TotalPages": {
                "$ref": "#/components/headers/PaginationTotalPages"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Student"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request GET \\\n  --url 'https://example.tld/wp-json/llms/v1/students?context=edit&page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&search=jamie%40lifterlms.com&search_columns=email%2Cusername&orderby=SOME_STRING_VALUE&include=1%2C2%2C3&exclude=10%2C11%2C12&enrolled_in=1%2C2%2C3&enrolled_not_in=4%2C5%2C6&roles=student%2Ccustomer' \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.get( '/students?context=edit&page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&search=jamie%40lifterlms.com&search_columns=email%2Cusername&orderby=SOME_STRING_VALUE&include=1%2C2%2C3&exclude=10%2C11%2C12&enrolled_in=1%2C2%2C3&enrolled_not_in=4%2C5%2C6&roles=student%2Ccustomer', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "post": {
        "summary": "Create a student",
        "description": "Creates a new student object.",
        "tags": [
          "Students"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Student"
                  },
                  {
                    "required": [
                      "email"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created the student.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Student"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request POST \\\n  --url https://example.tld/wp-json/llms/v1/students \\\n  --user ck_XXXXXX:cs_XXXXXX \\\n  --header 'content-type: application/json' \\\n  --data '{\"email\":\"jamie@lifterlms.com\",\"username\":\"jamie2019\",\"password\":\"my_l337-p@$5w0rd!\",\"description\":\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\"registered_date\":\"2019-05-03 19:25:01\",\"url\":\"https://myawesomewebsite.tld\",\"first_name\":\"Jamie\",\"last_name\":\"Cook\",\"nickname\":\"JamieC\",\"name\":\"Jamie Cook\",\"billing_address_1\":\"1234 Somewhere Place\",\"billing_address_2\":\"Suite ABC\",\"billing_city\":\"Anywhere\",\"billing_state\":\"CA\",\"billing_postcode\":\"12345-678\",\"billing_country\":\"US\",\"roles\":[\"student\"]}'"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nconst postData = {\n  \"email\": \"jamie@lifterlms.com\",\n  \"username\": \"jamie2019\",\n  \"password\": \"my_l337-p@$5w0rd!\",\n  \"description\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\n  \"registered_date\": \"2019-05-03 19:25:01\",\n  \"url\": \"https://myawesomewebsite.tld\",\n  \"first_name\": \"Jamie\",\n  \"last_name\": \"Cook\",\n  \"nickname\": \"JamieC\",\n  \"name\": \"Jamie Cook\",\n  \"billing_address_1\": \"1234 Somewhere Place\",\n  \"billing_address_2\": \"Suite ABC\",\n  \"billing_city\": \"Anywhere\",\n  \"billing_state\": \"CA\",\n  \"billing_postcode\": \"12345-678\",\n  \"billing_country\": \"US\",\n  \"roles\": [\n    \"student\"\n  ]\n};\n\nllms.post( '/students', postData, function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      }
    },
    "/students/{id}": {
      "parameters": [
        {
          "name": "id",
          "description": "Unique student Identifer. The WordPress User `ID`.",
          "example": 123,
          "in": "path",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        }
      ],
      "get": {
        "summary": "Retrieve a student",
        "description": "Retrieve the details of an existing student.",
        "tags": [
          "Students"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Context"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the student.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Student"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request GET \\\n  --url 'https://example.tld/wp-json/llms/v1/students/123?context=edit' \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.get( '/students/123?context=edit', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "post": {
        "summary": "Update a student",
        "description": "Update the specified student by setting the values of the parameters passed. Any parameters not provided will be left unchanged.",
        "tags": [
          "Students"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Student"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the student.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Student"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request POST \\\n  --url https://example.tld/wp-json/llms/v1/students/123 \\\n  --user ck_XXXXXX:cs_XXXXXX \\\n  --header 'content-type: application/json' \\\n  --data '{\"email\":\"jamie@lifterlms.com\",\"username\":\"jamie2019\",\"password\":\"my_l337-p@$5w0rd!\",\"description\":\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\"registered_date\":\"2019-05-03 19:25:01\",\"url\":\"https://myawesomewebsite.tld\",\"first_name\":\"Jamie\",\"last_name\":\"Cook\",\"nickname\":\"JamieC\",\"name\":\"Jamie Cook\",\"billing_address_1\":\"1234 Somewhere Place\",\"billing_address_2\":\"Suite ABC\",\"billing_city\":\"Anywhere\",\"billing_state\":\"CA\",\"billing_postcode\":\"12345-678\",\"billing_country\":\"US\",\"roles\":[\"student\"]}'"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nconst postData = {\n  \"email\": \"jamie@lifterlms.com\",\n  \"username\": \"jamie2019\",\n  \"password\": \"my_l337-p@$5w0rd!\",\n  \"description\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\n  \"registered_date\": \"2019-05-03 19:25:01\",\n  \"url\": \"https://myawesomewebsite.tld\",\n  \"first_name\": \"Jamie\",\n  \"last_name\": \"Cook\",\n  \"nickname\": \"JamieC\",\n  \"name\": \"Jamie Cook\",\n  \"billing_address_1\": \"1234 Somewhere Place\",\n  \"billing_address_2\": \"Suite ABC\",\n  \"billing_city\": \"Anywhere\",\n  \"billing_state\": \"CA\",\n  \"billing_postcode\": \"12345-678\",\n  \"billing_country\": \"US\",\n  \"roles\": [\n    \"student\"\n  ]\n};\n\nllms.post( '/students/123', postData, function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "delete": {
        "summary": "Delete a student",
        "description": "Delete an existing student.",
        "tags": [
          "Students"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reassign": {
                    "description": "ID of a WordPress User.\n\nAny posts owned by the deleted user will be reassigned to this user.\n\nLMS content and statuses (enrollments, for example), are not reassigned.\n\nDefault (passing `0` or nothing) delete's the users's content.\n",
                    "type": "integer",
                    "minimum": 0,
                    "default": 0,
                    "example": 456
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successfully deleted the student."
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request DELETE \\\n  --url https://example.tld/wp-json/llms/v1/students/123 \\\n  --user ck_XXXXXX:cs_XXXXXX \\\n  --header 'content-type: application/json' \\\n  --data '{\"reassign\":456}'"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nconst postData = {\n  \"reassign\": 456\n};\n\nllms.delete( '/students/123', postData, function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      }
    },
    "/students/{id}/enrollments": {
      "parameters": [
        {
          "name": "id",
          "description": "Unique student Identifer. The WordPress User `ID`.",
          "example": 123,
          "in": "path",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        }
      ],
      "get": {
        "summary": "List student enrollments",
        "description": "Retrieves a list of a student's enrollment records.",
        "tags": [
          "Student Enrollments"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Order"
          },
          {
            "name": "orderby",
            "description": "Specify the sort field for a collection of results.",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "date_updated",
                "date_created"
              ],
              "default": "date_updated"
            }
          },
          {
            "name": "status",
            "description": "Filter results to records matching the specified status.",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/EnrollmentStatus"
            }
          },
          {
            "name": "post",
            "in": "query",
            "description": "Limit results to a specific course or membership or a list of courses and/or memberships. Accepts a single post `id` or a comma separated list of post `id`s.",
            "schema": {
              "type": "string",
              "example": [
                1,
                2,
                3
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned a list of a student's enrollment records.",
            "headers": {
              "Link": {
                "description": "Pagination links for the collection.",
                "schema": {
                  "type": "string",
                  "example": "</wp-json/llms/v1/students/123/enrollment?page=1>; rel=\"first\", </wp-json/llms/v1/students/123/enrollment?page=2>; rel=\"prev\", </wp-json/llms/v1/students/123/enrollment?page=4>; rel=\"next\", </wp-json/llms/v1/students/123/enrollment?page=5>; rel=\"last\""
                }
              },
              "X-WP-Total": {
                "$ref": "#/components/headers/PaginationTotalResults"
              },
              "X-WP-TotalPages": {
                "$ref": "#/components/headers/PaginationTotalPages"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Enrollment"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request GET \\\n  --url 'https://example.tld/wp-json/llms/v1/students/123/enrollments?page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderby=SOME_STRING_VALUE&status=SOME_STRING_VALUE&post=1%2C2%2C3' \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.get( '/students/123/enrollments?page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderby=SOME_STRING_VALUE&status=SOME_STRING_VALUE&post=1%2C2%2C3', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      }
    },
    "/students/{id}/enrollments/{post_id}": {
      "parameters": [
        {
          "name": "id",
          "description": "Unique student Identifer. The WordPress User `ID`.",
          "example": 123,
          "in": "path",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        },
        {
          "name": "post_id",
          "description": "Unique course or membership Identifier. The WordPress Post `ID`.",
          "example": 456,
          "in": "path",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        }
      ],
      "get": {
        "summary": "Get student enrollment",
        "description": "Retrieves information about a student's enrollment in a course or membership.",
        "tags": [
          "Student Enrollments"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved student's enrollment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Enrollment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request GET \\\n  --url https://example.tld/wp-json/llms/v1/students/123/enrollments/456 \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.get( '/students/123/enrollments/456', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "post": {
        "summary": "Create student enrollment",
        "description": "Create a new enrollment for a student in a course or membership.",
        "tags": [
          "Student Enrollments"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/EnrollmentTrigger"
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the student's enrollment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Enrollment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request POST \\\n  --url 'https://example.tld/wp-json/llms/v1/students/123/enrollments/456?trigger=SOME_STRING_VALUE' \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.post( '/students/123/enrollments/456?trigger=SOME_STRING_VALUE', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "patch": {
        "summary": "Update student enrollment",
        "description": "Update an enrollment for a student in a course or membership.",
        "tags": [
          "Student Enrollments"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/EnrollmentTrigger"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Enrollment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated student's enrollment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Enrollment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request PATCH \\\n  --url 'https://example.tld/wp-json/llms/v1/students/123/enrollments/456?trigger=SOME_STRING_VALUE' \\\n  --user ck_XXXXXX:cs_XXXXXX \\\n  --header 'content-type: application/json' \\\n  --data '{\"date_created\":\"2019-05-21 14:22:05\",\"status\":\"enrolled\"}'"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nconst postData = {\n  \"date_created\": \"2019-05-21 14:22:05\",\n  \"status\": \"enrolled\"\n};\n\nllms.patch( '/students/123/enrollments/456?trigger=SOME_STRING_VALUE', postData, function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "delete": {
        "summary": "Delete student enrollment",
        "description": "Deletes the record of a student's enrollment in a course or membership.",
        "tags": [
          "Student Enrollments"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/EnrollmentTrigger"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted student's enrollment."
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request DELETE \\\n  --url 'https://example.tld/wp-json/llms/v1/students/123/enrollments/456?trigger=SOME_STRING_VALUE' \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.delete( '/students/123/enrollments/456?trigger=SOME_STRING_VALUE', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      }
    },
    "/students/{id}/progress/{post_id}": {
      "parameters": [
        {
          "name": "id",
          "description": "Unique student Identifer. The WordPress User `ID`.",
          "example": 123,
          "in": "path",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        },
        {
          "name": "post_id",
          "description": "Unique course, lesson, or section Identifer. The WordPress Post `ID`.",
          "example": 456,
          "in": "path",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        }
      ],
      "get": {
        "summary": "Get student progress",
        "description": "Retrieves information about a student's progress through course content.",
        "tags": [
          "Student Progress"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved student's progress.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Progress"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request GET \\\n  --url https://example.tld/wp-json/llms/v1/students/123/progress/456 \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.get( '/students/123/progress/456', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "post": {
        "summary": "Update student progress",
        "description": "Update the status of a student's progress through course content.",
        "tags": [
          "Student Progress"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Progress"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated student's progress.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Progress"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request POST \\\n  --url https://example.tld/wp-json/llms/v1/students/123/progress/456 \\\n  --user ck_XXXXXX:cs_XXXXXX \\\n  --header 'content-type: application/json' \\\n  --data '{\"date_created\":\"2019-05-21T14:22:05\",\"status\":\"incomplete\"}'"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nconst postData = {\n  \"date_created\": \"2019-05-21T14:22:05\",\n  \"status\": \"incomplete\"\n};\n\nllms.post( '/students/123/progress/456', postData, function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "delete": {
        "summary": "Delete student progress",
        "description": "Deletes the record of a student's progress through course content.",
        "tags": [
          "Student Progress"
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the student."
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request DELETE \\\n  --url https://example.tld/wp-json/llms/v1/students/123/progress/456 \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.delete( '/students/123/progress/456', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      }
    },
    "/webhooks": {
      "get": {
        "summary": "List webhooks",
        "description": "Retrieve a list of webhooks.",
        "tags": [
          "Webhooks"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Order"
          },
          {
            "name": "orderby",
            "description": "Specify the sort field for a collection of results.",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "name",
                "created",
                "updated"
              ],
              "default": "id"
            }
          },
          {
            "$ref": "#/components/parameters/Include"
          },
          {
            "$ref": "#/components/parameters/Exclude"
          },
          {
            "name": "status",
            "description": "Filter results to those matching a specific status.",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "paused",
                "disabled"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned a list of webhooks.",
            "headers": {
              "Link": {
                "description": "Pagination links for the collection.",
                "schema": {
                  "type": "string",
                  "example": "</wp-json/llms/v1/webhooks?page=1>; rel=\"first\", </wp-json/llms/v1/webhooks?page=2>; rel=\"prev\", </wp-json/llms/v1/webhooks?page=4>; rel=\"next\", </wp-json/llms/v1/webhooks?page=5>; rel=\"last\""
                }
              },
              "X-WP-Total": {
                "$ref": "#/components/headers/PaginationTotalResults"
              },
              "X-WP-TotalPages": {
                "$ref": "#/components/headers/PaginationTotalPages"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Webhook"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request GET \\\n  --url 'https://example.tld/wp-json/llms/v1/webhooks?page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderby=SOME_STRING_VALUE&include=1%2C2%2C3&exclude=10%2C11%2C12&status=SOME_STRING_VALUE' \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.get( '/webhooks?page=1&per_page=SOME_INTEGER_VALUE&order=SOME_STRING_VALUE&orderby=SOME_STRING_VALUE&include=1%2C2%2C3&exclude=10%2C11%2C12&status=SOME_STRING_VALUE', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "post": {
        "summary": "Create a webhook",
        "description": "Create a new webhook object.",
        "tags": [
          "Webhooks"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Webhook"
                  },
                  {
                    "required": [
                      "topic",
                      "delivery_url"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created the webhook.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request POST \\\n  --url https://example.tld/wp-json/llms/v1/webhooks \\\n  --user ck_XXXXXX:cs_XXXXXX \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"A Student Enrolled in a Course\",\"status\":\"disabled\",\"topic\":\"student.created\",\"delivery_url\":\"https://example.tld/webhook-receipt/endpoint\",\"secret\":\"$P3CI41-$3CR37!\"}'"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nconst postData = {\n  \"name\": \"A Student Enrolled in a Course\",\n  \"status\": \"disabled\",\n  \"topic\": \"student.created\",\n  \"delivery_url\": \"https://example.tld/webhook-receipt/endpoint\",\n  \"secret\": \"$P3CI41-$3CR37!\"\n};\n\nllms.post( '/webhooks', postData, function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      }
    },
    "/webhooks/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Unique webhook identifier. The WordPress Post `ID`.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        }
      ],
      "get": {
        "summary": "Retrieve a webhook",
        "description": "Retrieve the details of an existing webhook.",
        "tags": [
          "Webhooks"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the webhook.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request GET \\\n  --url https://example.tld/wp-json/llms/v1/webhooks/%7Bid%7D \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.get( '/webhooks/%7Bid%7D', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "post": {
        "summary": "Update a webhook",
        "description": "Update the specified webhook by setting the values of the parameters passed. Any parameters not provided will be left unchanged.",
        "tags": [
          "Webhooks"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Webhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the webhook.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request POST \\\n  --url https://example.tld/wp-json/llms/v1/webhooks/%7Bid%7D \\\n  --user ck_XXXXXX:cs_XXXXXX \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"A Student Enrolled in a Course\",\"status\":\"disabled\",\"topic\":\"student.created\",\"delivery_url\":\"https://example.tld/webhook-receipt/endpoint\",\"secret\":\"$P3CI41-$3CR37!\"}'"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nconst postData = {\n  \"name\": \"A Student Enrolled in a Course\",\n  \"status\": \"disabled\",\n  \"topic\": \"student.created\",\n  \"delivery_url\": \"https://example.tld/webhook-receipt/endpoint\",\n  \"secret\": \"$P3CI41-$3CR37!\"\n};\n\nllms.post( '/webhooks/%7Bid%7D', postData, function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      },
      "delete": {
        "summary": "Delete a webhook",
        "description": "Delete an existing webhook.",
        "tags": [
          "Webhooks"
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the webhook."
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        },
        "x-code-samples": [
          {
            "lang": "cURL",
            "source": "curl --request DELETE \\\n  --url https://example.tld/wp-json/llms/v1/webhooks/%7Bid%7D \\\n  --user ck_XXXXXX:cs_XXXXXX"
          },
          {
            "lang": "Node.js",
            "source": "const llmsAPI = require( \"llms-api-node\" );\nconst llms = new llmsAPI( {\n  \"url\": \"https://example.tld\",\n  \"consumerKey\": \"ck_XXXXXXXXXXXXXXXXXXXXXX\",\n  \"consumerSecret\": \"cs_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n} );\n\nllms.delete( '/webhooks/%7Bid%7D', function( err, data, res ) {\n  if ( err ) {\n    throw new Error( 'Error!' );\n  }\n  console.log( data );\n} );"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AccessPlan": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "readOnly": true,
                "description": "Unique Access Plan Identifier. The WordPress Post `ID`."
              },
              "price": {
                "description": "Access plan price.",
                "type": "number",
                "format": "float",
                "minimum": 0,
                "example": 199.97
              },
              "sku": {
                "description": "External identifier.",
                "type": "string",
                "example": "LIFETIME-999-001"
              },
              "frequency": {
                "description": "Billing frequency.<br> `0` denotes a one-time payment.<br> `>= 1` denotes a recurring plan.",
                "type": "integer",
                "minimum": 0,
                "maximum": 6,
                "default": 0
              },
              "length": {
                "description": "For recurring plans only.<br> Determines the number of intervals a plan should run for.<br> `0` denotes the plan should run until cancelled.",
                "type": "integer",
                "minimum": 0,
                "default": 0
              },
              "period": {
                "description": "For recurring plans only.<br> Determines the interval of recurring payments.",
                "type": "string",
                "enum": [
                  "year",
                  "month",
                  "week",
                  "day"
                ],
                "default": "year"
              },
              "enroll_text": {
                "description": "Text of the \"Purchase\" button",
                "type": "string",
                "default": "Buy Now"
              },
              "sale_enabled": {
                "description": "Mark the plan as \"On Sale\" allowing for temporary price adjustments.",
                "type": "boolean",
                "default": false
              },
              "sale_price": {
                "description": "Sale price.<br> Only applies when `sale_enabled` is `true`.",
                "type": "number",
                "format": "float",
                "minimum": 0,
                "example": 99.97
              },
              "sale_date_start": {
                "description": "Used to automatically start a scheduled sale. If empty, the plan is on sale immediately.<br> Only applies when `sale_enabled` is `true`. Format: `Y-m-d H:i:s`.",
                "type": "string",
                "example": "2019-01-23 00:00:00"
              },
              "sale_date_end": {
                "description": "Used to automatically end a scheduled sale. If empty, the plan remains on sale indefinitely.<br> Only applies when `sale_enabled` is `true`. Format: `Y-m-d H:i:s`.",
                "type": "string",
                "example": "2019-03-23 23:59:59"
              },
              "availability_restrictions": {
                "description": "Restrict usage of this access plan to students enrolled in at least one of the specified memberships.",
                "type": "array",
                "minimum": 1,
                "example": [
                  123,
                  456,
                  789
                ],
                "items": {
                  "type": "integer"
                }
              },
              "access_expiration": {
                "description": "Access expiration type.<br> `lifetime` provides access until cancelled or until a recurring payment fails.<br> `limited-period` provides access for a limited period as specified by `access_length` and `access_period`<br> `limited-date` provides access until the date specified by `access_expires_date`",
                "type": "string",
                "enum": [
                  "lifetime",
                  "limited-period",
                  "limited-date"
                ],
                "default": "lifetime"
              },
              "access_expires": {
                "description": "Date when access expires.<br> Only applicable when `access_expiration` is `limited-date`. Format: `Y-m-d H:i:s`.",
                "type": "string",
                "example": "2019-03-23 23:59:59"
              },
              "access_length": {
                "description": "Determine the length of access from time of purchase.<br> Only applicable when `access_expiration` is `limited-period`.",
                "type": "integer",
                "minimum": 1,
                "default": 1
              },
              "access_period": {
                "description": "Determine the length of access from time of purchase.<br> Only applicable when `access_expiration` is `limited-period`.",
                "type": "string",
                "enum": [
                  "year",
                  "month",
                  "week",
                  "day"
                ],
                "default": "year"
              },
              "trial_enabled": {
                "description": "Enable a trial period for a recurring access plan.",
                "type": "boolean",
                "default": false
              },
              "trial_length": {
                "description": "Determines the length of trial access.<br> Only applicable when `trial_enabled` is `true`.",
                "type": "integer",
                "minimum": 1,
                "default": 1
              },
              "trial_period": {
                "description": "Determines the length of trial access.<br> Only applicable when `trial_enabled` is `true`.",
                "type": "string",
                "enum": [
                  "year",
                  "month",
                  "week",
                  "day"
                ],
                "default": "week"
              },
              "trial_price": {
                "description": "Determines the price of the trial period.<br> Only applicable when `trial_enabled` is `true`.",
                "type": "number",
                "format": "float",
                "minimum": 0,
                "default": 0,
                "example": 1.99
              },
              "post_id": {
                "description": "Determines the course or membership which can be accessed through the plan.",
                "type": "integer",
                "minimum": 1,
                "example": 789
              },
              "post_type": {
                "$ref": "#/components/schemas/PostType",
                "default": "llms_access_plan",
                "type": "string"
              },
              "redirect_type": {
                "description": "Determines the redirection behavior of the user's browser upon successful checkout or registration through the plan.<br> `self`: Redirect to the permalink of the specified `post_id`. `page`: Redirect to the permalink of the WordPress page specified by `redirect_page_id`. `url`: Redirect to the URL specified by `redirect_url`.",
                "type": "string",
                "enum": [
                  "self",
                  "page",
                  "url"
                ],
                "default": "self"
              },
              "redirect_page": {
                "description": "WordPress page ID to use for checkout success redirection.<br>Applicable only when `redirect_type` is `page`.",
                "type": "integer",
                "minimum": 1
              },
              "redirect_url": {
                "description": "URL to use for checkout success redirection.<br>Applicable only when `redirect_type` is `url`.",
                "type": "string",
                "example": "https://example.tld/my/redirect"
              },
              "redirect_forced": {
                "description": "Use this plans's redirect settings when purchasing a Membership this plan is restricted to.<br> Applicable only when `availability_restrictions` exist for the plan.",
                "type": "boolean",
                "default": false
              },
              "visibility": {
                "description": "Access plan visibility.",
                "type": "string",
                "enum": [
                  "visible",
                  "hidden",
                  "featured"
                ],
                "default": "visible"
              }
            }
          },
          {
            "$ref": "#/components/schemas/Post"
          }
        ]
      },
      "AccessPlanRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AccessPlan"
          },
          {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "description": "Access plan name.",
                "example": "Liftetime Access"
              },
              "content": {
                "type": "string",
                "description": "Access plan short description.",
                "example": "\\n<ul><li>Expectoque quid ad id</li><li>quod quaerebam, respondeas</li></ul>\\n"
              }
            }
          }
        ]
      },
      "AccessPlanResponse": {
        "required": [
          "price"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/AccessPlan"
          },
          {
            "type": "object",
            "properties": {
              "title": {
                "description": "Access plan name.",
                "type": "object",
                "properties": {
                  "rendered": {
                    "type": "string",
                    "description": "Rendered title.",
                    "example": "Liftetime Access"
                  },
                  "raw": {
                    "type": "string",
                    "description": "Raw title. Useful when displaying title in the WP Block Editor. Only returned in `edit` context.",
                    "example": "Liftetime Access"
                  }
                }
              },
              "content": {
                "description": "Access plan short description.",
                "type": "object",
                "properties": {
                  "rendered": {
                    "type": "string",
                    "description": "Rendered description.",
                    "example": "\\n<ul><li>Expectoque quid ad id</li><li>quod quaerebam, respondeas</li></ul>\\n"
                  },
                  "raw": {
                    "type": "string",
                    "description": "Raw description. Useful when displaying title in the WP Block Editor. Only returned in `edit` context.",
                    "example": "\\n<ul><li>Expectoque quid ad id</li><li>quod quaerebam, respondeas</li></ul>\\n"
                  }
                }
              },
              "_links": {
                "description": "A map of links to other related API resources.",
                "type": "object",
                "readOnly": true,
                "properties": {
                  "self": {
                    "description": "REST URI to the access plan.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/access-plans/123"
                        }
                      }
                    }
                  },
                  "collection": {
                    "description": "REST URI to the access plan collection.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/access-plans"
                        }
                      }
                    }
                  },
                  "post": {
                    "description": "REST URI to the access plan's related course or membership.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/courses/789"
                        }
                      }
                    }
                  },
                  "restrictions": {
                    "description": "REST URIs to the memberships required to use the access plan.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/memberships?include=123,456,789"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "Address": {
        "type": "object",
        "properties": {
          "address_1": {
            "description": "Address line 1.",
            "type": "string",
            "example": "1234 Somewhere Place"
          },
          "address_2": {
            "description": "Address line 2.",
            "type": "string",
            "example": "Suite ABC"
          },
          "city": {
            "description": "City name.",
            "type": "string",
            "example": "Anywhere"
          },
          "state": {
            "description": "ISO code or state, province, or district name.",
            "type": "string",
            "example": "CA"
          },
          "postcode": {
            "description": "Postal code.",
            "type": "string",
            "example": "12345-678"
          },
          "country": {
            "description": "ISO country code.",
            "type": "string",
            "example": "US"
          }
        }
      },
      "APIKey": {
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "description": "Unique API Key Identifier."
              },
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "user_id": {
            "description": "The WordPress User ID of the API Key's owner.",
            "type": "integer",
            "minimum": 1,
            "example": 456
          },
          "description": {
            "description": "A friendly, human-readable name description of the key.",
            "type": "string",
            "example": "My API Key"
          },
          "permissions": {
            "description": "Determines the key's permissions and capabilities.",
            "type": "string",
            "enum": [
              "read",
              "write",
              "read_write"
            ]
          },
          "truncated_key": {
            "description": "The last 7 characters of the Consumer Key.",
            "type": "string",
            "example": "61913f3",
            "readOnly": true
          },
          "last_access": {
            "description": "The date the key was last used. Format: `Y-m-d H:i:s`",
            "type": "string",
            "example": "2019-05-21 19:22:05",
            "readOnly": true
          },
          "_links": {
            "description": "A map of links to other related API resources.",
            "type": "object",
            "readOnly": true,
            "properties": {
              "self": {
                "description": "REST URI to the API key.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "href": {
                      "type": "string",
                      "example": "/wp-json/llms/v1/api-keys/123"
                    }
                  }
                }
              },
              "collection": {
                "description": "REST URI to the API key collection.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "href": {
                      "type": "string",
                      "example": "/wp-json/llms/v1/api-keys"
                    }
                  }
                }
              },
              "user": {
                "description": "REST URI to the API key's owner.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "href": {
                      "type": "string",
                      "example": "/wp-json/wp/v2/users/456"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Course": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "readOnly": true,
                "description": "Unique Course Identifier. The WordPress Post `ID`."
              }
            }
          },
          {
            "$ref": "#/components/schemas/PostPublic"
          },
          {
            "type": "object",
            "properties": {
              "permalink": {
                "example": "https://example.com/course/getting-started-with-lifterlms"
              },
              "post_type": {
                "default": "course",
                "type": "string"
              },
              "catalog_visibility": {
                "description": "Visibility of the course in catalogs and search results.",
                "type": "string"
              },
              "categories": {
                "description": "List of course categories.",
                "type": "array",
                "items": {
                  "type": "integer"
                }
              },
              "tags": {
                "description": "List of course tags.",
                "type": "array",
                "items": {
                  "type": "integer"
                }
              },
              "difficulties": {
                "description": "List of course difficulties.",
                "type": "array",
                "default": [],
                "example": [
                  7
                ],
                "items": {
                  "type": "integer"
                }
              },
              "tracks": {
                "description": "List of course tracks.",
                "type": "array",
                "default": [],
                "example": [
                  8,
                  9
                ],
                "items": {
                  "type": "integer"
                }
              },
              "audio_embed": {
                "description": "URL to an oEmbed enable audio URL.",
                "type": "string",
                "example": "https://open.spotify.com/track/trackid"
              },
              "video_embed": {
                "description": "URL to an oEmbed enable video URL.",
                "type": "string",
                "example": "https://www.youtube.com/watch?v=videoid"
              },
              "capacity_enabled": {
                "description": "Determines if an enrollment capacity limit is enabled.",
                "type": "boolean",
                "default": false
              },
              "capacity_limit": {
                "description": "Number of students who can be enrolled in the course before enrollment closes.",
                "minimum": 0,
                "type": "integer",
                "example": 25
              },
              "prerequisite": {
                "description": "Course ID of the prerequisite course.",
                "type": "integer",
                "example": 456
              },
              "prerequisite_track": {
                "description": "Term ID of a the prerequisite track.",
                "type": "integer",
                "example": 789
              },
              "access_opens_date": {
                "description": "Date when the course opens, allowing enrolled students to begin to view and interact with the restricted course content.<br> If blank the course is open until after the `access_closes_date` has passed.<br> Does not affect course enrollment, see `enrollment_opens_date` to control the course enrollment start date.<br> Format: `Y-m-d H:i:s`.",
                "type": "string",
                "nullable": true,
                "example": "2019-05-20 17:22:05"
              },
              "access_closes_date": {
                "description": "Date when the course closes. After this date enrolled students may no longer view and interact with the restricted course content.<br> If blank the course is open indefinitely after the the `access_opens_date` has passed.<br> Does not affect course enrollment, see `enrollment_opens_date` to control the course enrollment close date.<br> Format: `Y-m-d H:i:s`.",
                "type": "string",
                "nullable": true,
                "example": "2019-06-05 17:22:05"
              },
              "enrollment_opens_date": {
                "description": "Date when the course enrollment opens.<br> If blank course enrollment is open until after the `enrollment_closes_date` has passed.<br> Does not affect course content access, see `access_opens_date` to control course access start date.<br> Format: `Y-m-d H:i:s`.",
                "type": "string",
                "nullable": true,
                "example": "2019-05-15 12:15:00"
              },
              "enrollment_closes_date": {
                "description": "Date when the course enrollment closes.<br> If blank course enrollment is open indefinitely after the the `enrollment_opens_date` has passed.<br> Does not affect course content access, see `access_opens_date` to control course access close date.<br> Format: `Y-m-d H:i:s`.",
                "type": "string",
                "nullable": true,
                "example": "2019-10-01 23:59:59"
              },
              "video_tile": {
                "description": "When `true` the `video_embed` will be used on the course tiles (on the catalog, for example) instead of the featured image.",
                "type": "boolean",
                "default": false
              }
            }
          },
          {
            "$ref": "#/components/schemas/SharedCourseMembership"
          }
        ]
      },
      "CourseRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PostContentRequest"
          },
          {
            "type": "object",
            "properties": {
              "access_opens_message": {
                "description": "Message displayed to enrolled students when the course is accessed before the `access_opens_date` has passed.",
                "type": "string",
                "default": "This course opens on [lifterlms_course_info key=\"start_date\"]."
              },
              "access_closes_message": {
                "description": "Message displayed to enrolled students when the course is accessed after the `access_closes_date` has passed.",
                "type": "string",
                "default": "This course closed on [lifterlms_course_info key=\"end_date\"]."
              },
              "enrollment_opens_message": {
                "description": "Message displayed to visitors when attempting to enroll into a course before the `enrollment_opens_date` has passed.",
                "type": "string",
                "default": "Enrollment in this course opens on [lifterlms_course_info key=\"enrollment_start_date\"]."
              },
              "enrollment_closes_message": {
                "description": "Message displayed to visitors when attempting to enroll into a course after the `enrollment_closes_date` has passed.",
                "type": "string",
                "default": "Enrollment in this course closed on [lifterlms_course_info key=\"enrollment_end_date\"]."
              },
              "capacity_message": {
                "description": "Message displayed when enrollment capacity has been reached.",
                "type": "string",
                "default": "Enrollment has closed because the maximum number of allowed students has been reached."
              },
              "length": {
                "description": "User defined course length.",
                "type": "string",
                "example": "7 days"
              },
              "restricted_message": {
                "description": "Message displayed when non-enrolled visitors try to access restricted course content (lessons, quizzes, etc..) directly.",
                "type": "string",
                "default": "You must enroll in this course to access course content."
              }
            }
          },
          {
            "$ref": "#/components/schemas/Course"
          }
        ]
      },
      "CourseResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PostContentResponse"
          },
          {
            "type": "object",
            "properties": {
              "access_opens_message": {
                "description": "Message displayed to enrolled students when the course is accessed before the `access_opens_date` has passed.",
                "type": "object",
                "properties": {
                  "rendered": {
                    "description": "Rendered message content.",
                    "type": "string",
                    "default": "This course opens on January, 28, 2019."
                  },
                  "raw": {
                    "description": "Raw message content.",
                    "type": "string",
                    "default": "This course opens on [lifterlms_course_info key=\"start_date\"]."
                  }
                }
              },
              "access_closes_message": {
                "description": "Message displayed to enrolled students when the course is accessed after the `access_closes_date` has passed.",
                "type": "object",
                "properties": {
                  "rendered": {
                    "description": "Rendered message content.",
                    "type": "string",
                    "default": "This course closed on March 5, 2018."
                  },
                  "raw": {
                    "description": "Raw message content.",
                    "type": "string",
                    "default": "This course closed on [lifterlms_course_info key=\"end_date\"]."
                  }
                }
              },
              "enrollment_opens_message": {
                "description": "Message displayed to visitors when attempting to enroll into a course before the `enrollment_opens_date` has passed.",
                "type": "object",
                "properties": {
                  "rendered": {
                    "description": "Rendered message content.",
                    "type": "string",
                    "default": "Enrollment in this course opens on opens on January, 28, 2019."
                  },
                  "raw": {
                    "description": "Raw message content.",
                    "type": "string",
                    "default": "Enrollment in this course opens on [lifterlms_course_info key=\"enrollment_start_date\"]."
                  }
                }
              },
              "enrollment_closes_message": {
                "description": "Message displayed to visitors when attempting to enroll into a course after the `enrollment_closes_date` has passed.",
                "type": "object",
                "properties": {
                  "rendered": {
                    "description": "Rendered message content.",
                    "type": "string",
                    "default": "Enrollment in this course closed on March 5, 2018."
                  },
                  "raw": {
                    "description": "Raw message content.",
                    "type": "string",
                    "default": "Enrollment in this course closed on [lifterlms_course_info key=\"enrollment_end_date\"]."
                  }
                }
              },
              "capacity_message": {
                "description": "Message displayed when enrollment capacity has been reached.",
                "type": "object",
                "properties": {
                  "rendered": {
                    "description": "Rendered message content.",
                    "type": "string",
                    "example": "Enrollment has closed because the maximum number of allowed students has been reached."
                  },
                  "raw": {
                    "description": "Raw message content.",
                    "type": "string",
                    "example": "Enrollment has closed because the maximum number of allowed students has been reached."
                  }
                }
              },
              "length": {
                "description": "User defined course length.",
                "type": "object",
                "properties": {
                  "rendered": {
                    "description": "Rendered length description.",
                    "type": "string",
                    "example": "7 days"
                  },
                  "raw": {
                    "description": "Raw length description.",
                    "type": "string",
                    "example": "7 days"
                  }
                }
              },
              "restricted_message": {
                "description": "Message displayed when non-enrolled visitors try to access restricted course content (lessons, quizzes, etc..) directly.",
                "type": "object",
                "properties": {
                  "rendered": {
                    "description": "Rendered message content.",
                    "type": "string",
                    "default": "You must enroll in this course to access course content."
                  },
                  "raw": {
                    "description": "Raw message content.",
                    "type": "string",
                    "default": "You must enroll in this course to access course content."
                  }
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/Course"
          },
          {
            "type": "object",
            "properties": {
              "_links": {
                "description": "A map of links to other related API resources.",
                "type": "object",
                "readOnly": true,
                "properties": {
                  "self": {
                    "description": "REST URI to the course.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/courses/1234"
                        }
                      }
                    }
                  },
                  "collection": {
                    "description": "REST URI to the course collection.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/courses"
                        }
                      }
                    }
                  },
                  "access_plans": {
                    "description": "REST URI to the collection of access plans for the course.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/access-plans?post_id=1234"
                        }
                      }
                    }
                  },
                  "content": {
                    "description": "REST URI to the course's content collection.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/courses/1234/content"
                        }
                      }
                    }
                  },
                  "enrollments": {
                    "description": "REST URI to the collection of the courses's enrollments.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/courses/1234/enrollments"
                        }
                      }
                    }
                  },
                  "instructors": {
                    "description": "REST URI to the collection of the course's instructors.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/instructors?post=1234"
                        }
                      }
                    }
                  },
                  "prerequisites": {
                    "description": "REST URIs to course prerequisite resources.",
                    "type": "array",
                    "example": [
                      {
                        "type": "course",
                        "href": "/wp-json/llms/v1/courses/456"
                      },
                      {
                        "type": "track",
                        "href": "/wp-json/wp/v2/course_track/789"
                      }
                    ],
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "href": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "students": {
                    "description": "REST URI to the collection of the course's enrolled students.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/students?enrolled_in=1234"
                        }
                      }
                    }
                  },
                  "wp:featured_media": {
                    "description": "REST URI to the WordPress attachement image.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/wp/v2/media/987"
                        }
                      }
                    }
                  },
                  "wp:term": {
                    "description": "Collection of REST URIs to the course's taxonomy term information.",
                    "type": "array",
                    "example": [
                      {
                        "taxonomy": "course_cat",
                        "href": "/wp-json/wp/v2/course_cat?post=1234"
                      },
                      {
                        "taxonomy": "course_tag",
                        "href": "/wp-json/wp/v2/course_tag?post=1234"
                      },
                      {
                        "taxonomy": "course_difficulty",
                        "href": "/wp-json/wp/v2/course_difficulty?post=1234"
                      },
                      {
                        "taxonomy": "course_track",
                        "href": "/wp-json/wp/v2/course_track?post=1234"
                      }
                    ],
                    "items": {
                      "type": "object",
                      "properties": {
                        "taxonomy": {
                          "type": "string"
                        },
                        "href": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "Enrollment": {
        "type": "object",
        "properties": {
          "student_id": {
            "description": "The ID of the student.",
            "type": "integer",
            "minimum": 1,
            "example": 123,
            "readOnly": true
          },
          "post_id": {
            "description": "The ID of the course/membership.",
            "type": "integer",
            "minimum": 1,
            "example": 456,
            "readOnly": true
          },
          "date_created": {
            "description": "The enrollment creation date. Format: `Y-m-d H:i:s`",
            "type": "string",
            "example": "2019-05-21 14:22:05"
          },
          "date_updated": {
            "description": "The date of the last enrollment update. Format: `Y-m-d H:i:s`",
            "type": "string",
            "example": "2019-05-21 19:22:05",
            "readOnly": true
          },
          "status": {
            "$ref": "#/components/schemas/EnrollmentStatus"
          },
          "trigger": {
            "description": "The enrollment trigger.",
            "type": "string",
            "readOnly": true
          },
          "_links": {
            "description": "A map of links to other related API resources.",
            "readOnly": true,
            "type": "object",
            "properties": {
              "self": {
                "description": "REST URI to the enrollment.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "href": {
                      "type": "string",
                      "example": "/wp-json/llms/v1/students/123/enrollments/456"
                    }
                  }
                }
              },
              "collection": {
                "description": "REST URI to the enrollments collection.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "href": {
                      "type": "string",
                      "example": "/wp-json/llms/v1/students/123/enrollments"
                    }
                  }
                }
              },
              "post": {
                "description": "Rest URI to the post resource.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "course",
                        "membership"
                      ],
                      "example": "course"
                    },
                    "href": {
                      "type": "string",
                      "example": "/wp-json/llms/v1/courses/456"
                    }
                  }
                }
              },
              "student": {
                "description": "Rest URI to the student resource.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "href": {
                      "type": "string",
                      "example": "/wp-json/llms/v1/students/123"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "EnrollmentStatus": {
        "description": "The status of the enrollment.",
        "type": "string",
        "enum": [
          "enrolled",
          "expired",
          "cancelled"
        ]
      },
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "description": "The API error code."
          },
          "message": {
            "description": "The API error message."
          },
          "data": {
            "description": "Additional response data.",
            "type": "object",
            "properties": {
              "status": {
                "minimum": 100,
                "maximum": 600,
                "description": "The HTTP status code."
              }
            }
          }
        }
      },
      "Error400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "properties": {
              "code": {
                "default": "llms_rest_bad_request",
                "type": "string"
              },
              "message": {
                "default": "Invalid or malformed request syntax.",
                "type": "string"
              },
              "data": {
                "properties": {
                  "status": {
                    "default": 400,
                    "type": "integer"
                  }
                }
              }
            }
          }
        ]
      },
      "Error401": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "properties": {
              "code": {
                "default": "llms_rest_unauthorized_request",
                "type": "string"
              },
              "message": {
                "default": "The API credentials were invalid.",
                "type": "string"
              },
              "data": {
                "properties": {
                  "status": {
                    "default": 401,
                    "type": "integer"
                  }
                }
              }
            }
          }
        ]
      },
      "Error403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "properties": {
              "code": {
                "default": "llms_rest_forbidden_request",
                "type": "string"
              },
              "message": {
                "default": "You are not authorized to perform this request.",
                "type": "string"
              },
              "data": {
                "properties": {
                  "status": {
                    "default": 403,
                    "type": "integer"
                  }
                }
              }
            }
          }
        ]
      },
      "Error404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "properties": {
              "code": {
                "default": "llms_rest_not_found",
                "type": "string"
              },
              "message": {
                "default": "The requested resource could not be found.",
                "type": "string"
              },
              "data": {
                "properties": {
                  "status": {
                    "default": 404,
                    "type": "integer"
                  }
                }
              }
            }
          }
        ]
      },
      "Group": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "description": "Unique group identifier. The WordPress Post `ID`.",
                "readOnly": true
              }
            }
          },
          {
            "$ref": "#/components/schemas/Post"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "readOnly": true,
                "example": 1987
              },
              "slug": {
                "description": "Group URL slug.",
                "type": "string",
                "example": "team-codebox"
              },
              "permalink": {
                "description": "Post URL.",
                "type": "string",
                "example": "https://example.com/group/team-codebox",
                "readOnly": true
              },
              "post_type": {
                "default": "llms_group",
                "type": "string",
                "readOnly": true
              },
              "post": {
                "description": "WordPress post ID of the course or membership accessible by the group.",
                "type": "integer",
                "minimum": 1,
                "example": 1234
              },
              "visibility": {
                "description": "Visibility of the group profile.\n\nThe available options and the default value are dependent of the site's global settings. For example, if the site's group visibility option is \"closed\" than no groups on the site can be set to anything other than \"closed\". The default value will always equal the site's global setting.\n",
                "type": "string",
                "enum": [
                  "open",
                  "private",
                  "closed"
                ]
              }
            }
          }
        ]
      },
      "GroupInvitation": {
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "description": "Unique Invitation Identifier."
              },
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "accept_link": {
            "description": "URL used to accept the invitation.",
            "type": "string",
            "readOnly": true,
            "example": "https://example.com/dashboard?invite=eb5d96fa7cfa7eb0469511c142c6de2f"
          },
          "email": {
            "description": "Email address of the invited group member.\n\nIf no email address is supplied, an open invitation link will be created. Only one such record\nmay exist for the group. An attempt to create a new one when one already exists will result in\na `400 Bad Request` Error response.\n",
            "type": "string",
            "example": "stephen@example.net",
            "default": ""
          },
          "role": {
            "description": "Group member role.",
            "type": "string",
            "default": "member",
            "enum": [
              "member",
              "leader",
              "admin"
            ]
          },
          "_links": {
            "description": "A map of links to other related API resources.",
            "readOnly": true,
            "type": "object",
            "properties": {
              "self": {
                "description": "REST URI to the group invitation.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "href": {
                      "type": "string",
                      "example": "/wp-json/llms/v1/groups/123/invitations/456"
                    }
                  }
                }
              },
              "collection": {
                "description": "REST URI to the collection.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "href": {
                      "type": "string",
                      "example": "/wp-json/llms/v1/groups/123/invitations"
                    }
                  }
                }
              },
              "group": {
                "description": "Rest URI to the group resource.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "href": {
                      "type": "string",
                      "example": "/wp-json/llms/v1/groups/123"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "GroupMember": {
        "description": "Group Member User Object",
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              },
              {
                "description": "Unique Member Identifer. The WordPress User `ID`.",
                "example": 789
              }
            ]
          },
          "email": {
            "description": "The user's email address.\n\n Only returned when `context=edit`.\n",
            "type": "string",
            "example": "jamie@lifterlms.com",
            "readOnly": true
          },
          "avatar_urls": {
            "description": "A list of the Gravatars available for the user.\n\nThe object key is the size (in pixels) of the avatar and the value is the Gravatar's URL.\n",
            "type": "object",
            "readOnly": true,
            "properties": {
              "24": {
                "type": "string",
                "example": "https://secure.gravatar.com/avatar/30eab7b16342fe5f772ed30a36da2763?s=24&d=mm&r=g"
              },
              "48": {
                "type": "string",
                "example": "https://secure.gravatar.com/avatar/30eab7b16342fe5f772ed30a36da2763?s=48&d=mm&r=g"
              },
              "96": {
                "type": "string",
                "example": "https://secure.gravatar.com/avatar/30eab7b16342fe5f772ed30a36da2763?s=48&d=mm&r=g"
              }
            }
          },
          "nickname": {
            "description": "The user's chosen nickname.\n\n Only returned when `context=edit`.\n",
            "type": "string",
            "example": "JamieC",
            "readOnly": true
          },
          "name": {
            "description": "The user's public display name.",
            "type": "string",
            "example": "Jamie Cook",
            "readOnly": true
          },
          "group_role": {
            "description": "The user's role within the group.",
            "type": "string",
            "enum": [
              "member",
              "leader",
              "admin",
              "primary_admin"
            ],
            "default": "member"
          },
          "_links": {
            "description": "A map of links to other related API resources.",
            "type": "object",
            "readOnly": true,
            "properties": {
              "self": {
                "description": "REST URI to the member.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "href": {
                      "type": "string",
                      "example": "/wp-json/llms/v1/groups/123/members/789"
                    }
                  }
                }
              },
              "collection": {
                "description": "REST URI to the group members collection.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "href": {
                      "type": "string",
                      "example": "/wp-json/llms/v1/groups/123/members"
                    }
                  }
                }
              },
              "group": {
                "description": "Rest URI to the group resource.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "href": {
                      "type": "string",
                      "example": "/wp-json/llms/v1/groups/123"
                    }
                  }
                }
              },
              "student": {
                "description": "REST URI to the student.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "href": {
                      "type": "string",
                      "example": "/wp-json/llms/v1/students/789"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "GroupRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PostContentRequest"
          },
          {
            "$ref": "#/components/schemas/Group"
          },
          {
            "type": "object",
            "properties": {
              "logo": {
                "description": "WordPress post ID of the attachment post for the group's logo image.",
                "type": "integer",
                "example": 1987,
                "minimum": 0
              },
              "banner": {
                "description": "WordPress post ID of the attachment post for the group's banner image.",
                "type": "integer",
                "example": 1897,
                "minimum": 0
              }
            }
          }
        ]
      },
      "GroupResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PostContentResponse"
          },
          {
            "$ref": "#/components/schemas/Group"
          },
          {
            "type": "object",
            "properties": {
              "logo": {
                "description": "Group logo image.",
                "type": "object",
                "properties": {
                  "id": {
                    "description": "WordPress post ID of the attachment post.",
                    "example": 1987,
                    "minimum": 0
                  },
                  "source_url": {
                    "description": "Full URL to the attachment file. If no `logo.id` is set, `logo.source_url` will default to the sitewide group logo image url.",
                    "example": "https://example.com/wp-content/uploads/2020/01/team-codebox-logo.jpg"
                  }
                }
              },
              "banner": {
                "description": "Group banner image.",
                "type": "object",
                "properties": {
                  "id": {
                    "description": "WordPress post ID of the attachment post.",
                    "example": 1897,
                    "minimum": 0
                  },
                  "source_url": {
                    "description": "Full URL to the attachment file. If no `banner.id` is set, `banner.source_url` will default to the sitewide group banner image url.",
                    "example": "https://example.com/wp-content/uploads/2020/01/team-codebox-banner.jpg"
                  }
                }
              },
              "_links": {
                "description": "A map of links to other related API resources.",
                "type": "object",
                "readOnly": true,
                "properties": {
                  "self": {
                    "description": "REST URI to the course.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/groups/1234"
                        }
                      }
                    }
                  },
                  "collection": {
                    "description": "REST URI to the course collection.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/groups"
                        }
                      }
                    }
                  },
                  "post": {
                    "description": "Rest URI to the post resource.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "course",
                            "membership"
                          ],
                          "example": "course"
                        },
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/courses/456"
                        }
                      }
                    }
                  },
                  "enrollments": {
                    "description": "REST URI to the collection of the groups's enrollments.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/groups/1234/enrollments"
                        }
                      }
                    }
                  },
                  "instructors": {
                    "description": "REST URI to the collection of the course's instructors.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/instructors?post=1234"
                        }
                      }
                    }
                  },
                  "students": {
                    "description": "REST URI to the collection of the course's enrolled students.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/students?enrolled_in=1234"
                        }
                      }
                    }
                  },
                  "logo": {
                    "description": "REST URI to the WordPress attachement.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/wp/v2/media/1987"
                        }
                      }
                    }
                  },
                  "banner": {
                    "description": "REST URI to the WordPress attachement.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/wp/v2/media/1897"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "GroupSeat": {
        "type": "object",
        "properties": {
          "total": {
            "description": "Number of available seats.\n\nDuring a `PUT` request, must be >= `used`.\n",
            "type": "integer",
            "minimum": 1,
            "example": 20
          },
          "used": {
            "description": "Number of used seats.\n\nThis value is calculated by adding the number of group current members to the number of open invitations.\n",
            "type": "integer",
            "minimum": 1,
            "example": 5,
            "readOnly": true
          },
          "open": {
            "description": "Number of remaining seats.\n\nThis value is calculated by subtracting the `used` property from the `total` property.\n",
            "type": "integer",
            "minimum": 0,
            "example": 15,
            "readOnly": true
          },
          "_links": {
            "description": "A map of links to other related API resources.",
            "readOnly": true,
            "type": "object",
            "properties": {
              "self": {
                "description": "REST URI to the group seats resource.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "href": {
                      "type": "string",
                      "example": "/wp-json/llms/v1/groups/123/seats"
                    }
                  }
                }
              },
              "group": {
                "description": "Rest URI to the group resource.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "href": {
                      "type": "string",
                      "example": "/wp-json/llms/v1/groups/123"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Instructor": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "description": "Unique Instructor Identifer. The WordPress User `ID`.",
                "readOnly": true
              }
            }
          },
          {
            "$ref": "#/components/schemas/User"
          },
          {
            "type": "object",
            "properties": {
              "roles": {
                "description": "The user's WordPress user role.\n\nOnly returned when `context=edit`.\n",
                "type": "array",
                "default": [
                  "instructor"
                ],
                "items": {
                  "type": "string",
                  "enum": [
                    "administrator",
                    "lms_manager",
                    "instructor",
                    "instructors_assistant"
                  ]
                }
              },
              "_links": {
                "description": "A map of links to other related API resources.",
                "type": "object",
                "readOnly": true,
                "properties": {
                  "self": {
                    "description": "REST URI to the instructor.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/instructors/1234"
                        }
                      }
                    }
                  },
                  "collection": {
                    "description": "REST URI to the instructor collection.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/instructors"
                        }
                      }
                    }
                  },
                  "content": {
                    "description": "REST URI to a collection of the instructor's content.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/instructors/1234/contents"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "Lesson": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "description": "Unique lesson identifier. The WordPress Post `ID`.",
                "readOnly": true
              }
            }
          },
          {
            "$ref": "#/components/schemas/PostPublic"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "readOnly": true,
                "example": 789
              },
              "permalink": {
                "example": "https://example.com/lesson/getting-started-with-lifterlms"
              },
              "post_type": {
                "default": "lesson",
                "type": "string"
              },
              "audio_embed": {
                "description": "URL to an oEmbed enable audio URL.",
                "type": "string",
                "example": "https://open.spotify.com/track/trackid"
              },
              "video_embed": {
                "description": "URL to an oEmbed enable video URL.",
                "type": "string",
                "example": "https://www.youtube.com/watch?v=videoid"
              },
              "prerequisite": {
                "description": "Lesson ID of the prerequisite lesson.",
                "type": "integer",
                "example": 321
              },
              "public": {
                "description": "Denotes a lesson that's publicly accessible regardless of course enrollment.",
                "type": "boolean",
                "default": false
              },
              "course_id": {
                "description": "WordPress post ID of the lesson's parent course.",
                "type": "integer",
                "minimum": 1,
                "example": 1234,
                "readOnly": true
              },
              "parent_id": {
                "description": "WordPress post ID of the parent item.<br> Must be a Section ID. `0` indicates an \"orphaned\" lesson which can be edited and viewed by instructors and admins but cannot be read by students.",
                "type": "integer",
                "minimum": 0,
                "example": 987
              },
              "points": {
                "description": "Determines the weight of the lesson when grading the course.",
                "type": "integer",
                "minimum": 0,
                "default": 1
              },
              "order": {
                "description": "Order of the lesson within its immediate parent.",
                "type": "integer",
                "default": 1,
                "minimum": 1
              },
              "drip_method": {
                "description": "Determine the method with which to make the lesson content available.\n\n- `none`: Drip is disabled; the lesson is immediately available.\n- `date`: Lesson is made available at a specific date and time.\n- `enrollment`: Lesson is made available a specific number of days after enrollment into the course.\n- `start`: Lesson is made available a specific number of days after the course's start date. Only available on courses with a `access_opens_date`.\n- `prerequisite`: Lesson is made available a specific number of days after the `prerequisite` lesson is completed.\n",
                "type": "string",
                "enum": [
                  "none",
                  "date",
                  "enrollment",
                  "start",
                  "prerequisite"
                ],
                "default": "none"
              },
              "drip_days": {
                "description": "Number of days to wait before allowing access to the lesson. Applicable only when `drip_method` is `enrollment`, `start`, or `prerequisite`.",
                "type": "integer",
                "minimum": 1,
                "default": 1
              },
              "drip_date": {
                "description": "The date and time when the lesson becomes available. Applicable only when `drip_method` is `date`. Format: `Y-m-d H:i:s`.",
                "type": "string",
                "nullable": true,
                "example": "2019-12-12 23:23:59"
              },
              "quiz": {
                "description": "Associate a quiz with this lesson.",
                "type": "object",
                "properties": {
                  "enabled": {
                    "description": "Determines if a quiz is enabled for the lesson.",
                    "type": "boolean",
                    "default": false,
                    "example": true
                  },
                  "id": {
                    "description": "The post ID of the associated quiz.",
                    "type": "integer",
                    "minimum": 0,
                    "default": 0,
                    "example": 432
                  },
                  "progression": {
                    "description": "Determines lesson progression requirements related to the quiz.\n\n- `complete`: The quiz must be completed (with any grade) to progress the lesson.\n- `pass`: A passing grade must be earned to progress the lesson.\n",
                    "type": "string",
                    "enum": [
                      "complete",
                      "pass"
                    ],
                    "default": "complete"
                  }
                }
              },
              "assignment": {
                "description": "Associate an assignment with this lesson.\n\n_While assignment functionality is included with the LifterLMS Core REST API, the assignments themselves are implemented by the LifterLMS Assignments add-on._\n",
                "type": "object",
                "properties": {
                  "enabled": {
                    "description": "Determines if an assignment is enabled for the lesson.",
                    "type": "boolean",
                    "default": false,
                    "example": true
                  },
                  "id": {
                    "description": "The post ID of the associated assingment.",
                    "type": "integer",
                    "minimum": 0,
                    "default": 0,
                    "example": 876
                  },
                  "progression": {
                    "description": "Determines lesson progression requirements related to the assignment.\n\n- `complete`: The assignment must be completed (with any grade) to progress the lesson.\n- `pass`: A passing grade must be earned to progress the lesson.\n",
                    "type": "string",
                    "enum": [
                      "complete",
                      "pass"
                    ],
                    "default": "complete"
                  }
                }
              }
            }
          }
        ]
      },
      "LessonRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PostContentRequest"
          },
          {
            "$ref": "#/components/schemas/Lesson"
          }
        ]
      },
      "LessonResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PostContentResponse"
          },
          {
            "$ref": "#/components/schemas/Lesson"
          },
          {
            "type": "object",
            "properties": {
              "_links": {
                "description": "A map of links to other related API resources.",
                "type": "object",
                "readOnly": true,
                "properties": {
                  "self": {
                    "description": "REST URI to the lesson.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/lessons/1234"
                        }
                      }
                    }
                  },
                  "collection": {
                    "description": "REST URI to the lesson collection.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/lessons"
                        }
                      }
                    }
                  },
                  "assignment": {
                    "description": "REST URI to the lesson's assignment.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/assignments/876"
                        }
                      }
                    }
                  },
                  "course": {
                    "description": "REST URI to the lesson's parent course.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/courses/1234"
                        }
                      }
                    }
                  },
                  "next": {
                    "description": "REST URI to the next sibling lesson in the section.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/lessons/4567"
                        }
                      }
                    }
                  },
                  "prerequisite": {
                    "description": "REST URIs to lesson prerequisite resources.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "lesson"
                        },
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/lessons/321"
                        }
                      }
                    }
                  },
                  "previous": {
                    "description": "REST URI to the previous sibling lesson in the section.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/lessons/8910"
                        }
                      }
                    }
                  },
                  "parent": {
                    "description": "REST URI to the lessons's parent.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "section"
                        },
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/sections/987"
                        }
                      }
                    }
                  },
                  "quiz": {
                    "description": "REST URI to the lesson's quiz.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/quizzes/432"
                        }
                      }
                    }
                  },
                  "siblings": {
                    "description": "REST URI to the collection of the lessons's siblings within its parent.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/lessons?parent=987"
                        }
                      }
                    }
                  },
                  "wp:featured_media": {
                    "description": "REST URI to the WordPress attachement image.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/wp/v2/media/987"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "Membership": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "readOnly": true,
                "description": "Unique membership identifier. The WordPress Post `ID`."
              }
            }
          },
          {
            "$ref": "#/components/schemas/PostPublic"
          },
          {
            "type": "object",
            "properties": {
              "permalink": {
                "example": "https://example.com/membership/getting-started-with-lifterlms"
              },
              "post_type": {
                "default": "llms_membership",
                "type": "string"
              },
              "categories": {
                "description": "List of membership categories.",
                "type": "array",
                "items": {
                  "type": "integer"
                }
              },
              "tags": {
                "description": "List of membership tags.",
                "type": "array",
                "items": {
                  "type": "integer"
                }
              },
              "restriction_action": {
                "description": "Determines the action to take when content restricted by the membership is accessed by a non-member.<br>\n`none`: Remain on page and display the message `restriction_message`.\n`membership`: Redirect to the membership's permalink.\n`page`: Redirect to the permalink of the page identified by `restriction_page_id`.\n`custom`: Redirect to the URL identified by `restriction_url`.\n",
                "type": "string",
                "enum": [
                  "none",
                  "membership",
                  "page",
                  "custom"
                ],
                "default": "none"
              },
              "restriction_page_id": {
                "description": "WordPress page ID used for redirecting non-members when `restriction_action` is `page`.",
                "type": "integer",
                "minimum": 1,
                "example": 456
              },
              "restriction_url": {
                "description": "URL used for redirecting non-members when `restriction_action` is `custom`.",
                "type": "string",
                "example": "https://example.tld/my-custom-url"
              },
              "auto_enroll": {
                "description": "List of courses to automatically enroll students into when they're enrolled into the membership.",
                "type": "array",
                "default": [],
                "example": [
                  456,
                  789
                ],
                "items": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/SharedCourseMembership"
          }
        ]
      },
      "MembershipRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PostContentRequest"
          },
          {
            "type": "object",
            "properties": {
              "restriction_message": {
                "description": "Message to display to non-members after a `restriction_action` redirect. When `restriction_action` is `none` replaces the page content with this message.",
                "type": "string",
                "default": "You must belong to the [lifterlms_membership_link id=\"1234\"] membership to access this content."
              }
            }
          },
          {
            "$ref": "#/components/schemas/Membership"
          }
        ]
      },
      "MembershipResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PostContentResponse"
          },
          {
            "$ref": "#/components/schemas/Membership"
          },
          {
            "type": "object",
            "properties": {
              "restriction_message": {
                "description": "Message to display to non-members after a `restriction_action` redirect. When `restriction_action` is `none` replaces the page content with this message.",
                "type": "object",
                "properties": {
                  "rendered": {
                    "description": "Rendered message content.",
                    "type": "string",
                    "default": "You must belong to the <a href=\"https://example.com/membership/gold\">Gold</a> membership to access this content."
                  },
                  "raw": {
                    "description": "Raw message content.",
                    "type": "string",
                    "default": "You must belong to the [lifterlms_membership_link id=\"1234\"] membership to access this content."
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "_links": {
                "description": "A map of links to other related API resources.",
                "type": "object",
                "readOnly": true,
                "properties": {
                  "self": {
                    "description": "REST URI to the membership.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/memberships/1234"
                        }
                      }
                    }
                  },
                  "collection": {
                    "description": "REST URI to the membership collection.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/memberships"
                        }
                      }
                    }
                  },
                  "access_plans": {
                    "description": "REST URI to the collection of access plans for the membership.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/access-plans?post_id=1234"
                        }
                      }
                    }
                  },
                  "auto_enrollment_courses": {
                    "description": "REST URI to the collection of automatic enrollment courses for the membership.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/courses?include=456,789"
                        }
                      }
                    }
                  },
                  "enrollments": {
                    "description": "REST URI to the collection of the memberships's enrollments.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/enrollments?post=1234"
                        }
                      }
                    }
                  },
                  "instructors": {
                    "description": "REST URI to the collection of the membership's instructors.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/instructors?post=1234"
                        }
                      }
                    }
                  },
                  "students": {
                    "description": "REST URI to the collection of the membership's enrolled students.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/students?enrolled_in=1234"
                        }
                      }
                    }
                  },
                  "wp:featured_media": {
                    "description": "REST URI to the WordPress attachement image.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/wp/v2/media/987"
                        }
                      }
                    }
                  },
                  "wp:term": {
                    "description": "Collection of REST URIs to the membership's taxonomy term information.",
                    "type": "array",
                    "example": [
                      {
                        "taxonomy": "membership_cat",
                        "href": "/wp-json/wp/v2/membership_cat?post=1234"
                      },
                      {
                        "taxonomy": "membership_tag",
                        "href": "/wp-json/wp/v2/membership_tag?post=1234"
                      }
                    ],
                    "items": {
                      "type": "object",
                      "properties": {
                        "taxonomy": {
                          "type": "string"
                        },
                        "href": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "Post": {
        "description": "Reduced WordPress Post object properties shared by LifterLMS custom post types",
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "allOf": [
              {
                "description": "Unique Post Identifier. The WordPress Post `ID`."
              },
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "date_created": {
            "description": "Creation date. Format: `Y-m-d H:i:s`.",
            "type": "string",
            "example": "2019-05-20 17:22:05"
          },
          "date_created_gmt": {
            "description": "Creation date (in GMT). Format: `Y-m-d H:i:s`.",
            "type": "string",
            "example": "2019-05-20 13:22:05"
          },
          "date_updated": {
            "description": "Date last modified. Format: `Y-m-d H:i:s`.",
            "type": "string",
            "example": "2019-05-20 17:25:05",
            "readOnly": true
          },
          "date_updated_gmt": {
            "description": "Date last modified (in GMT). Format: `Y-m-d H:i:s`.",
            "type": "string",
            "example": "2019-05-20 13:25:05",
            "readOnly": true
          },
          "menu_order": {
            "description": "Custom post sort order.",
            "type": "integer",
            "default": 0,
            "minimum": 0
          }
        }
      },
      "PostContentRequest": {
        "description": "Post content request fields.",
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Raw title.",
            "example": "Getting Started with LifterLMS"
          },
          "content": {
            "type": "string",
            "description": "Raw post content.",
            "example": "<!-- wp:heading -->\\n<h2>Lorem ipsum dolor sit amet.</h2>\\n<!-- /wp:heading -->\\n\\n<!-- wp:paragraph -->\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>\\n<!-- /wp:paragraph -->"
          },
          "excerpt": {
            "type": "string",
            "description": "Raw excerpt content.",
            "example": "Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus."
          }
        }
      },
      "PostContentResponse": {
        "description": "Post content fields.",
        "type": "object",
        "properties": {
          "title": {
            "description": "Post title.",
            "type": "object",
            "properties": {
              "rendered": {
                "type": "string",
                "description": "Rendered title.",
                "example": "Getting Started with LifterLMS"
              },
              "raw": {
                "type": "string",
                "description": "Raw title. Useful when displaying title in the WP Block Editor. Only returned in `edit` context.",
                "example": "Getting Started with LifterLMS"
              }
            }
          },
          "content": {
            "description": "Post content.",
            "type": "object",
            "properties": {
              "rendered": {
                "type": "string",
                "description": "Rendered post content.",
                "example": "\\n<h2>Lorem ipsum dolor sit amet.</h2>\\n\\n\\n\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>\\n"
              },
              "raw": {
                "type": "string",
                "description": "Raw post content. Useful when displaying title in the WP Block Editor. Only returned in `edit` context.",
                "example": "<!-- wp:heading -->\\n<h2>Lorem ipsum dolor sit amet.</h2>\\n<!-- /wp:heading -->\\n\\n<!-- wp:paragraph -->\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>\\n<!-- /wp:paragraph -->"
              }
            }
          },
          "excerpt": {
            "description": "Post excerpt.",
            "type": "object",
            "properties": {
              "rendered": {
                "type": "string",
                "description": "Rendered HTML content.",
                "example": "<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>"
              },
              "raw": {
                "type": "string",
                "description": "Raw HTML content. Useful when displaying title in the WP Block Editor. Only returned in `edit` context.",
                "example": "Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus."
              }
            }
          }
        }
      },
      "PostPublic": {
        "description": "Reduced WordPress Post object properties shared by LifterLMS custom post types",
        "allOf": [
          {
            "$ref": "#/components/schemas/Post"
          },
          {
            "type": "object",
            "properties": {
              "slug": {
                "description": "Post URL slug.",
                "type": "string",
                "example": "getting-started-with-lifterlms"
              },
              "permalink": {
                "description": "Post URL.",
                "type": "string",
                "example": "https://example.com/post/getting-started-with-lifterlms",
                "readOnly": true
              },
              "post_type": {
                "$ref": "#/components/schemas/PostType"
              },
              "status": {
                "$ref": "#/components/schemas/PostStatus"
              },
              "password": {
                "description": "Password used to protect access to the content.<br>Readable only in `edit` context.",
                "type": "string",
                "example": "p4$sW0rd"
              },
              "featured_media": {
                "description": "Featured image ID.",
                "type": "integer",
                "example": 987
              },
              "comment_status": {
                "description": "Post comment status. Default comment status dependent upon general WordPress post discussion settings.",
                "type": "string",
                "enum": [
                  "open",
                  "closed"
                ],
                "default": "open"
              },
              "ping_status": {
                "description": "Post ping status. Default ping status dependent upon general WordPress post discussion settings.",
                "type": "string",
                "enum": [
                  "open",
                  "closed"
                ],
                "default": "open"
              }
            }
          }
        ]
      },
      "PostStatus": {
        "description": "The publication status of the course.",
        "type": "string",
        "enum": [
          "publish",
          "pending",
          "draft",
          "auto-draft",
          "future",
          "private",
          "trash"
        ],
        "default": "publish"
      },
      "PostType": {
        "description": "LifterLMS custom post type.",
        "type": "string",
        "readOnly": true
      },
      "Progress": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "student_id": {
            "description": "The ID of the student.",
            "type": "integer",
            "minimum": 1,
            "example": 123,
            "readOnly": true
          },
          "post_id": {
            "description": "The ID of the course, section, or lesson.",
            "type": "integer",
            "minimum": 1,
            "example": 456,
            "readOnly": true
          },
          "date_created": {
            "description": "The progress creation date. Cannot be in the future.",
            "type": "string",
            "format": "date-time",
            "example": "2019-05-21T14:22:05"
          },
          "date_updated": {
            "description": "The date of the last progress update.",
            "type": "string",
            "format": "date-time",
            "example": "2019-05-21T19:22:05",
            "readOnly": true
          },
          "progress": {
            "description": "Student's progress as a percentage.",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "maximum": 100,
            "default": 0,
            "example": 89.83,
            "readOnly": true
          },
          "status": {
            "description": "Student progress status.",
            "type": "string",
            "enum": [
              "incomplete",
              "complete"
            ],
            "default": "incomplete"
          },
          "_links": {
            "description": "A map of links to other related API resources.",
            "readOnly": true,
            "type": "object",
            "properties": {
              "self": {
                "description": "REST URI to the progress.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "href": {
                      "type": "string",
                      "example": "/wp-json/llms/v1/students/123/progress/456"
                    }
                  }
                }
              },
              "post": {
                "description": "Rest URI to the post resource.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "course",
                        "section",
                        "lesson"
                      ],
                      "example": "course"
                    },
                    "href": {
                      "type": "string",
                      "example": "/wp-json/llms/v1/courses/456"
                    }
                  }
                }
              },
              "student": {
                "description": "Rest URI to the student resource.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "href": {
                      "type": "string",
                      "example": "/wp-json/llms/v1/students/123"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Quiz": {
        "description": "Base quiz post object.",
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique quiz identifer. The WordPress Post `ID`.",
            "type": "integer",
            "minimum": 234,
            "readOnly": true
          },
          "date_created": {
            "description": "Creation date. Format: `Y-m-d H:i:s`.",
            "type": "string",
            "example": "2019-05-20 17:22:05"
          },
          "date_created_gmt": {
            "description": "Creation date (in GMT). Format: `Y-m-d H:i:s`.",
            "type": "string",
            "example": "2019-05-20 13:22:05"
          },
          "date_updated": {
            "description": "Date last modified. Format: `Y-m-d H:i:s`.",
            "type": "string",
            "example": "2019-05-20 17:25:05",
            "readOnly": true
          },
          "date_updated_gmt": {
            "description": "Date last modified (in GMT). Format: `Y-m-d H:i:s`.",
            "type": "string",
            "example": "2019-05-20 13:25:05",
            "readOnly": true
          },
          "slug": {
            "description": "Quiz URL slug.",
            "type": "string",
            "example": "final-exam"
          },
          "permalink": {
            "description": "Quiz URL.",
            "type": "string",
            "example": "https://example.tld/quiz/final-exam",
            "readOnly": true
          },
          "post_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PostType"
              }
            ],
            "type": "string",
            "default": "llms_quiz"
          },
          "status": {
            "description": "The publication status of the quiz.",
            "type": "string",
            "enum": [
              "publish",
              "draft"
            ],
            "default": "draft"
          },
          "attempt_limiting": {
            "description": "Determine if attempt limiting is enabled.\n\nWhen enabled, students are locked out after the number of attempts specified by `allowed_attempts`.\n",
            "type": "boolean",
            "default": false,
            "example": true
          },
          "attempts_allowed": {
            "description": "Limit the number of times a student can attempt the quiz before the quiz is locked. Only used when `attempt_limiting` is `true`.",
            "type": "integer",
            "minimum": 1
          },
          "time_limiting": {
            "description": "Determine if a time limit is enforced for each attempt.\n\nWhen enabled, a quiz attempt is automatically ended after the time period specified by `time_limit` has passed.\n",
            "type": "boolean",
            "default": false,
            "example": true
          },
          "time_limit": {
            "description": "Determines the number of minutes allowed for each quiz attempt. Only used when `time_limiting` is `true`.",
            "type": "integer",
            "minimum": 1,
            "example": 90
          },
          "passing_percentage": {
            "description": "Determines the grade required to consider an attempt \"passing\".",
            "type": "number",
            "minimum": 0,
            "default": 65
          },
          "total_points": {
            "description": "The total points of all questions within the quiz.",
            "type": "integer",
            "minimum": 0,
            "example": 10,
            "readOnly": true
          },
          "show_correct_answer": {
            "description": "When enabled, students will be shown the correct answers to questions they answered incorrectly during quiz reviews.",
            "type": "boolean",
            "default": false
          },
          "randomize_questions": {
            "description": "When enabled, questions will be shuffled into a random order for each new quiz attempt.",
            "type": "boolean",
            "default": false
          },
          "course_id": {
            "description": "WordPress post ID of the quizzes's parent course.",
            "type": "integer",
            "minimum": 1,
            "example": 1234,
            "readOnly": true
          },
          "parent_id": {
            "description": "WordPress post ID of the parent item.<br> Must be a Lesson ID. `0` indicates an \"orphaned\" quiz which can be edited and viewed by instructors and admins but cannot be taken by students.",
            "type": "integer",
            "minimum": 0,
            "example": 789
          }
        }
      },
      "QuizQuestion": {
        "description": "Base quiz question post object.",
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique question identifer. The WordPress Post `ID`.",
            "type": "integer",
            "minimum": 234,
            "readOnly": true
          },
          "date_created": {
            "description": "Creation date. Format: `Y-m-d H:i:s`.",
            "type": "string",
            "example": "2019-05-20 17:22:05"
          },
          "date_created_gmt": {
            "description": "Creation date (in GMT). Format: `Y-m-d H:i:s`.",
            "type": "string",
            "example": "2019-05-20 13:22:05"
          },
          "date_updated": {
            "description": "Date last modified. Format: `Y-m-d H:i:s`.",
            "type": "string",
            "example": "2019-05-20 17:25:05",
            "readOnly": true
          },
          "date_updated_gmt": {
            "description": "Date last modified (in GMT). Format: `Y-m-d H:i:s`.",
            "type": "string",
            "example": "2019-05-20 13:25:05",
            "readOnly": true
          },
          "post_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PostType"
              }
            ],
            "type": "string",
            "default": "llms_question"
          },
          "order": {
            "description": "Order of the question within its immediate parent.",
            "type": "integer",
            "default": 1,
            "minimum": 1
          },
          "parent_id": {
            "description": "Resource ID of the question's parent (quiz).",
            "type": "integer",
            "minimum": 1,
            "example": 234
          },
          "points": {
            "description": "Number of points awarded for correctly answering the question.",
            "type": "integer",
            "minimum": 0,
            "default": 1,
            "example": 10
          },
          "video_embed": {
            "description": "URL to an oEmbed enable video URL.",
            "type": "string",
            "example": "https://www.youtube.com/watch?v=videoid"
          },
          "featured_media": {
            "description": "Featured image ID.",
            "type": "integer",
            "example": 205
          }
        }
      },
      "QuizQuestionRequest": {
        "type": "object",
        "properties": {
          "title": {
            "description": "Raw quiz title. Most likely in the form of a question.",
            "type": "string",
            "example": "What is your favorite color?"
          },
          "content": {
            "description": "Raw quiz content. Useful for providing additional information or context to the question.",
            "type": "string",
            "example": "<h2>Lorem ipsum dolor sit amet.</h2>\\n\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>"
          },
          "answer_clarification": {
            "description": "Raw additional clarifying information displayed on the quiz attempt review screen when the question was answered incorrectly.",
            "type": "string",
            "example": "<h2>Lorem ipsum dolor sit amet.</h2>\\n\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>"
          }
        }
      },
      "QuizQuestionResponse": {
        "type": "object",
        "properties": {
          "title": {
            "description": "Quiz title. Most likely in the form of a question.",
            "type": "object",
            "properties": {
              "rendered": {
                "type": "string",
                "description": "Rendered title.",
                "example": "What is your favorite color?"
              },
              "raw": {
                "type": "string",
                "description": "Raw title. Useful when displaying title in the WP Editor. Only returned in `edit` context.",
                "example": "What is your favorite color?"
              }
            }
          },
          "content": {
            "description": "Quiz content. Useful for providing additional information or context to the question.",
            "type": "object",
            "properties": {
              "rendered": {
                "type": "string",
                "description": "Rendered content.",
                "example": "<h2>Lorem ipsum dolor sit amet.</h2>\\n\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>"
              },
              "raw": {
                "type": "string",
                "description": "Raw content. Useful when displaying title in the WP Block Editor. Only returned in `edit` context.",
                "example": "<h2>Lorem ipsum dolor sit amet.</h2>\\n\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>"
              }
            }
          },
          "answer_clarification": {
            "description": "Additional clarifying information displayed on the quiz attempt review screen when the question was answered incorrectly.",
            "type": "object",
            "properties": {
              "rendered": {
                "type": "string",
                "description": "Rendered content.",
                "example": "<h2>Lorem ipsum dolor sit amet.</h2>\\n\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>"
              },
              "raw": {
                "type": "string",
                "description": "Raw content. Useful when displaying title in the WP Block Editor. Only returned in `edit` context.",
                "example": "<h2>Lorem ipsum dolor sit amet.</h2>\\n\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>"
              }
            }
          }
        }
      },
      "QuizQuestionTypeBlank": {
        "title": "Fill in the Blank",
        "description": "Fill in the Blank quiz question type",
        "allOf": [
          {
            "$ref": "#/components/schemas/QuizQuestion"
          },
          {
            "type": "object",
            "properties": {
              "question_type": {
                "description": "The type of question.",
                "type": "string",
                "default": "blank"
              },
              "correct_value": {
                "description": "Specify the correct value(s) for each blank in the `title` property and enable automatic grading of the question.\n\nFor questions with multiple blanks, separate each blank by with a pipe (`|`) character. The correct values should be supplied in the same order as the blanks.\n",
                "type": "string",
                "example": "foo|bar"
              }
            }
          }
        ]
      },
      "QuizQuestionTypeChoice": {
        "title": "Multiple Choice",
        "description": "Choice quiz question type",
        "allOf": [
          {
            "$ref": "#/components/schemas/QuizQuestion"
          },
          {
            "type": "object",
            "properties": {
              "question_type": {
                "description": "The type of question.",
                "type": "string",
                "default": "choice"
              },
              "choices": {
                "description": "A collection of choices available for the question.",
                "type": "array",
                "minItems": 2,
                "maxItems": 26,
                "example": [
                  {
                    "marker": "A",
                    "choice": "Red",
                    "correct": false
                  },
                  {
                    "marker": "B",
                    "choice": "Green",
                    "correct": true
                  }
                ],
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "Unique resource identifier for the choice.",
                      "type": "string",
                      "readOnly": true
                    },
                    "marker": {
                      "description": "The marker used to visually identify and order the choices.\n\nValid markers: `A` through `Z`.\n\nIf no marker is supplied, the next available marker in the range will be used.\n",
                      "type": "string",
                      "default": "A"
                    },
                    "choice": {
                      "description": "Raw choice text.",
                      "type": "string"
                    },
                    "correct": {
                      "description": "Determines if the choice is correct.\n\nWhen `multi_choices` is disabled, only one choice may be marked as `correct`.\n",
                      "type": "boolean",
                      "default": false
                    }
                  }
                }
              },
              "multi_choices": {
                "description": "Enable multiple correct answers.\n\nWhen disabled only a single correct choice is available, when enabled, one or more correct choices are available.\n",
                "type": "boolean",
                "default": false
              }
            }
          }
        ]
      },
      "QuizQuestionTypeContent": {
        "title": "Content",
        "description": "Content quiz question type",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "question_type": {
                "description": "The type of question.",
                "type": "string",
                "default": "content"
              },
              "points": {
                "type": "integer",
                "readOnly": true,
                "example": 0,
                "default": 0
              }
            }
          },
          {
            "$ref": "#/components/schemas/QuizQuestion"
          }
        ]
      },
      "QuizQuestionTypeLongAnswer": {
        "title": "Long Answer",
        "description": "Long answer quiz question type",
        "allOf": [
          {
            "$ref": "#/components/schemas/QuizQuestion"
          },
          {
            "type": "object",
            "properties": {
              "question_type": {
                "description": "The type of question.",
                "type": "string",
                "default": "long_answer"
              },
              "words_min": {
                "description": "Minimum word count for the answer. Setting the minimum at `0` disables the minimum word count.",
                "type": "integer",
                "minimum": 0,
                "example": 500
              },
              "words_max": {
                "description": "Maximum word count for the answer.  Setting the maximum at `0` disables the maximum word count.",
                "type": "integer",
                "minimum": 0,
                "example": 10000
              }
            }
          }
        ]
      },
      "QuizQuestionTypePictureChoice": {
        "title": "Picture Choice",
        "description": "Picuter choice quiz question type",
        "allOf": [
          {
            "$ref": "#/components/schemas/QuizQuestion"
          },
          {
            "type": "object",
            "properties": {
              "question_type": {
                "description": "The type of question.",
                "type": "string",
                "default": "picture_choice"
              },
              "choices": {
                "description": "A collection of choices available for the question.",
                "type": "array",
                "minItems": 2,
                "maxItems": 26,
                "example": [
                  {
                    "marker": "A",
                    "choice": {
                      "id": 98,
                      "src": "https://mysite.tld/wp-content/uploads/2019/05/picture-choice-img-1.png"
                    },
                    "correct": false
                  },
                  {
                    "marker": "B",
                    "choice": {
                      "id": 99,
                      "src": "https://mysite.tld/wp-content/uploads/2019/05/picture-choice-img-2.png"
                    },
                    "correct": true
                  }
                ],
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "Unique resource identifier for the choice.",
                      "type": "string",
                      "readOnly": true
                    },
                    "marker": {
                      "description": "The marker used to visually identify and order the choices.\n\nValid markers: `A` through `Z`.\n\nIf no marker is supplied, the next available marker in the range will be used.\n",
                      "type": "string",
                      "default": "A"
                    },
                    "choice": {
                      "description": "Object of image information for the choice.",
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "WP Attachment ID for the choice image.",
                          "type": "integer",
                          "minimum": 1
                        },
                        "src": {
                          "description": "Full URL to the image resource on the server. Only returned in edit context",
                          "type": "string",
                          "readOnly": true
                        }
                      }
                    },
                    "correct": {
                      "description": "Determines if the choice is correct.\n\nWhen `multi_choices` is disabled, only one choice may be marked as `correct`.\n",
                      "type": "boolean",
                      "default": false
                    }
                  }
                }
              },
              "multi_choices": {
                "description": "Enable multiple correct answers.\n\nWhen disabled only a single correct choice is available, when enabled, one or more correct choices are available.\n",
                "type": "boolean",
                "default": false
              }
            }
          }
        ]
      },
      "QuizQuestionTypesResponseList": {
        "anyOf": [
          {
            "title": "Multiple Choice",
            "allOf": [
              {
                "$ref": "#/components/schemas/QuizQuestionTypeChoice"
              },
              {
                "$ref": "#/components/schemas/QuizQuestionResponse"
              }
            ]
          },
          {
            "title": "Picture Choice",
            "allOf": [
              {
                "$ref": "#/components/schemas/QuizQuestionTypePictureChoice"
              },
              {
                "$ref": "#/components/schemas/QuizQuestionResponse"
              }
            ]
          },
          {
            "title": "True / False",
            "allOf": [
              {
                "$ref": "#/components/schemas/QuizQuestionTypeTrueFalse"
              },
              {
                "$ref": "#/components/schemas/QuizQuestionResponse"
              }
            ]
          },
          {
            "title": "Content",
            "allOf": [
              {
                "$ref": "#/components/schemas/QuizQuestionTypeContent"
              },
              {
                "$ref": "#/components/schemas/QuizQuestionResponse"
              }
            ]
          },
          {
            "title": "Fill in the Blank",
            "allOf": [
              {
                "$ref": "#/components/schemas/QuizQuestionTypeBlank"
              },
              {
                "$ref": "#/components/schemas/QuizQuestionResponse"
              }
            ]
          },
          {
            "title": "Long Answer",
            "allOf": [
              {
                "$ref": "#/components/schemas/QuizQuestionTypeLongAnswer"
              },
              {
                "$ref": "#/components/schemas/QuizQuestionResponse"
              }
            ]
          }
        ]
      },
      "QuizQuestionTypeTrueFalse": {
        "title": "True / False",
        "description": "True / False quiz question type",
        "allOf": [
          {
            "$ref": "#/components/schemas/QuizQuestion"
          },
          {
            "type": "object",
            "properties": {
              "question_type": {
                "description": "The type of question.",
                "type": "string",
                "default": "true_false"
              },
              "choices": {
                "description": "A collection of choices available for the question.",
                "type": "array",
                "minItems": 2,
                "maxItems": 2,
                "example": [
                  {
                    "marker": "A",
                    "choice": "True",
                    "correct": false
                  },
                  {
                    "marker": "B",
                    "choice": "False",
                    "correct": true
                  }
                ],
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "Unique resource identifier for the choice.",
                      "type": "string",
                      "readOnly": true
                    },
                    "marker": {
                      "description": "The marker used to visually identify and order the choices.",
                      "type": "string",
                      "enum": [
                        "A",
                        "B"
                      ],
                      "default": "A"
                    },
                    "choice": {
                      "description": "Raw choice text.",
                      "type": "string"
                    },
                    "correct": {
                      "description": "Determines if the choice is correct.",
                      "type": "boolean",
                      "default": false
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "QuizRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Quiz"
          },
          {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "description": "Raw title.",
                "example": "Final Exam"
              },
              "content": {
                "type": "string",
                "description": "Raw content.",
                "example": "<h2>Lorem ipsum dolor sit amet.</h2>\\n\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>"
              }
            }
          }
        ]
      },
      "QuizResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Quiz"
          },
          {
            "type": "object",
            "properties": {
              "title": {
                "description": "Quiz title.",
                "type": "object",
                "properties": {
                  "rendered": {
                    "type": "string",
                    "description": "Rendered title.",
                    "example": "Final Exam"
                  },
                  "raw": {
                    "type": "string",
                    "description": "Raw title. Useful when displaying title in the WP Editor. Only returned in `edit` context.",
                    "example": "Final Exam"
                  }
                }
              },
              "content": {
                "description": "Post content.",
                "type": "object",
                "properties": {
                  "rendered": {
                    "type": "string",
                    "description": "Rendered content.",
                    "example": "<h2>Lorem ipsum dolor sit amet.</h2>\\n\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>"
                  },
                  "raw": {
                    "type": "string",
                    "description": "Raw content. Useful when displaying title in the WP Block Editor. Only returned in `edit` context.",
                    "example": "<h2>Lorem ipsum dolor sit amet.</h2>\\n\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>"
                  }
                }
              },
              "_links": {
                "description": "A map of links to other related API resources.",
                "type": "object",
                "readOnly": true,
                "properties": {
                  "self": {
                    "description": "REST URI to the lesson.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/quizzes/234"
                        }
                      }
                    }
                  },
                  "collection": {
                    "description": "REST URI to the lesson collection.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/quizzes"
                        }
                      }
                    }
                  },
                  "course": {
                    "description": "REST URI to the lesson's parent course.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/courses/1234"
                        }
                      }
                    }
                  },
                  "parent": {
                    "description": "REST URI to the quiz's parent.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "course"
                        },
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/lessons/789"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "ResourceId": {
        "description": "Unique Resource Identifier.",
        "type": "integer",
        "minimum": 1,
        "example": 123,
        "readOnly": true
      },
      "Section": {
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "description": "Unique section identifier. The WordPress Post `ID`.",
                "readOnly": true
              },
              {
                "$ref": "#/components/schemas/ResourceId"
              },
              {
                "example": 987
              }
            ]
          },
          "date_created": {
            "description": "Creation date. Format: `Y-m-d H:i:s`.",
            "type": "string",
            "example": "2019-05-20 17:22:05"
          },
          "date_created_gmt": {
            "description": "Creation date (in GMT). Format: `Y-m-d H:i:s`.",
            "type": "string",
            "example": "2019-05-20 13:22:05"
          },
          "date_updated": {
            "description": "Date last modified. Format: `Y-m-d H:i:s`.",
            "type": "string",
            "example": "2019-05-20 17:25:05",
            "readOnly": true
          },
          "date_updated_gmt": {
            "description": "Date last modified (in GMT). Format: `Y-m-d H:i:s`.",
            "type": "string",
            "example": "2019-05-20 13:25:05",
            "readOnly": true
          },
          "order": {
            "description": "Order of the section within the course.",
            "type": "integer",
            "default": 1,
            "minimum": 1
          },
          "parent_id": {
            "description": "WordPress post ID of the parent item.<br> Must be a Course ID.",
            "type": "integer",
            "minimum": 1,
            "example": 1234
          },
          "post_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PostType"
              }
            ],
            "type": "string",
            "default": "section"
          }
        }
      },
      "SectionRequest": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "title",
              "order",
              "parent_id"
            ],
            "properties": {
              "title": {
                "type": "string",
                "description": "Raw title.",
                "example": "Getting Started with LifterLMS"
              }
            }
          },
          {
            "$ref": "#/components/schemas/Section"
          }
        ]
      },
      "SectionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Section"
          },
          {
            "type": "object",
            "properties": {
              "title": {
                "description": "Section Title",
                "type": "object",
                "properties": {
                  "rendered": {
                    "description": "Rendered title.",
                    "type": "string",
                    "example": "Introduction"
                  },
                  "raw": {
                    "description": "Raw title.",
                    "type": "string",
                    "example": "Introduction"
                  }
                }
              },
              "_links": {
                "description": "A map of links to other related API resources.",
                "type": "object",
                "readOnly": true,
                "properties": {
                  "self": {
                    "description": "REST URI to the section.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/sections/1234"
                        }
                      }
                    }
                  },
                  "collection": {
                    "description": "REST URI to the section collection.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/sections"
                        }
                      }
                    }
                  },
                  "content": {
                    "description": "REST URI to the section's child content.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/sections/1234/content"
                        }
                      }
                    }
                  },
                  "next": {
                    "description": "REST URI to the next sibling section in the course.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/sections/3456"
                        }
                      }
                    }
                  },
                  "parent": {
                    "description": "REST URI to the section's parent.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "course"
                        },
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/courses/1234"
                        }
                      }
                    }
                  },
                  "prevous": {
                    "description": "REST URI to the prevous sibling section in the course.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/sections/7891"
                        }
                      }
                    }
                  },
                  "siblings": {
                    "description": "REST URI to the collection of the section's siblings within its parent.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/courses/1234/content?exclude=7891"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "SharedCourseMembership": {
        "description": "Properties shared by courses and memberships.",
        "type": "object",
        "properties": {
          "catalog_visibility": {
            "description": "Visibility of the post in catalogs and search results.",
            "type": "string",
            "enum": [
              "catalog_search",
              "catalog",
              "search",
              "hidden"
            ],
            "default": "catalog_search"
          },
          "categories": {
            "description": "List of post categories.",
            "type": "array",
            "default": [],
            "example": [
              1,
              2,
              3
            ],
            "items": {
              "type": "integer"
            }
          },
          "tags": {
            "description": "List of post tags.",
            "type": "array",
            "default": [],
            "example": [
              4,
              5,
              6
            ],
            "items": {
              "type": "integer"
            }
          },
          "instructors": {
            "description": "List of post instructors. Defaults to current user when creating a new post.",
            "type": "array",
            "default": [],
            "example": [
              1,
              2,
              3
            ],
            "minItems": 1,
            "items": {
              "type": "integer"
            }
          },
          "sales_page_type": {
            "description": "Defines alternate content displayed to visitors and non-enrolled students when accessing the post.<br> - `none` displays the post content.<br> - `content` displays alternate content from the `excerpt` property.<br> - `page` redirects to the WordPress page defined in `content_page_id`.<br> - `url` redirects to the URL defined in `content_page_url`.",
            "type": "string",
            "enum": [
              "none",
              "content",
              "page",
              "url"
            ],
            "default": "none"
          },
          "sales_page_page_id": {
            "description": "The WordPress page ID of the sales page.<br> Required when `sales_page_type` equals `page`.<br> Only returned when the `sales_page_type` equals `page`.",
            "type": "integer",
            "example": 543
          },
          "sales_page_url": {
            "description": "The URL of the sales page content.<br> Required when `sales_page_type` equals `url`.<br> Only returned when the `sales_page_type` equals `url`.",
            "type": "string",
            "example": "https://example.tld/custom-sales-page"
          }
        }
      },
      "Student": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "description": "Unique Student Identifer. The WordPress User `ID`.",
                "readOnly": true
              }
            }
          },
          {
            "$ref": "#/components/schemas/User"
          },
          {
            "type": "object",
            "properties": {
              "roles": {
                "description": "The user's WordPress user role.\n\nOnly returned when `context=edit`.\n",
                "type": "array",
                "default": [
                  "student"
                ],
                "items": {
                  "type": "string"
                }
              },
              "_links": {
                "description": "A map of links to other related API resources.",
                "type": "object",
                "readOnly": true,
                "properties": {
                  "self": {
                    "description": "REST URI to the student.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/students/456"
                        }
                      }
                    }
                  },
                  "collection": {
                    "description": "REST URI to the student collection.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/students"
                        }
                      }
                    }
                  },
                  "enrollments": {
                    "description": "REST URI to a collection of the student's enrollments.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/students/456/enrollments"
                        }
                      }
                    }
                  },
                  "progress": {
                    "description": "REST URI to a collection of the student's progress records.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/students/456/progress"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "User": {
        "description": "Reduced WordPress User object properties shared by LifterLMS custom user types",
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              },
              {
                "description": "Unique User Identifer. The WordPress User `ID`.",
                "example": 456
              }
            ]
          },
          "email": {
            "description": "The user's email address.\n\nOnly returned when `context=edit`.\n",
            "type": "string",
            "example": "jamie@lifterlms.com"
          },
          "username": {
            "description": "The user's username.\n\nOnly returned when `context=edit`.\n",
            "type": "string",
            "example": "jamie2019"
          },
          "password": {
            "description": "The user's password.",
            "type": "string",
            "example": "my_l337-p@$5w0rd!",
            "writeOnly": true
          },
          "description": {
            "description": "The user's biography or description.",
            "type": "string",
            "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
          },
          "registered_date": {
            "description": "The user's original site registration date.\n\nOnly returned when `context=edit`.\n",
            "type": "string",
            "example": "2019-05-03 19:25:01"
          },
          "avatar_urls": {
            "description": "A list of the Gravatars available for the user.\n\nThe object key is the size (in pixels) of the avatar and the value is the Gravatar's URL.\n",
            "type": "object",
            "readOnly": true,
            "properties": {
              "24": {
                "type": "string",
                "example": "https://secure.gravatar.com/avatar/30eab7b16342fe5f772ed30a36da2763?s=24&d=mm&r=g"
              },
              "48": {
                "type": "string",
                "example": "https://secure.gravatar.com/avatar/30eab7b16342fe5f772ed30a36da2763?s=48&d=mm&r=g"
              },
              "96": {
                "type": "string",
                "example": "https://secure.gravatar.com/avatar/30eab7b16342fe5f772ed30a36da2763?s=48&d=mm&r=g"
              }
            }
          },
          "url": {
            "description": "The user's URL.",
            "type": "string",
            "example": "https://myawesomewebsite.tld"
          },
          "first_name": {
            "description": "The user's first name.\n\nOnly returned when `context=edit`.\n",
            "type": "string",
            "example": "Jamie"
          },
          "last_name": {
            "description": "The user's last name.\n\nOnly returned when `context=edit`.\n",
            "type": "string",
            "example": "Cook"
          },
          "nickname": {
            "description": "The user's chosen nickname.\n\nOnly returned when `context=edit`.\n",
            "type": "string",
            "example": "JamieC"
          },
          "name": {
            "description": "The user's public display name.",
            "type": "string",
            "example": "Jamie Cook"
          },
          "billing_address_1": {
            "description": "Address line 1.\n\nOnly returned when `context=edit`.\n",
            "type": "string",
            "example": "1234 Somewhere Place"
          },
          "billing_address_2": {
            "description": "Address line 2.\n\nOnly returned when `context=edit`.\n",
            "type": "string",
            "example": "Suite ABC"
          },
          "billing_city": {
            "description": "City name.\n\nOnly returned when `context=edit`.\n",
            "type": "string",
            "example": "Anywhere"
          },
          "billing_state": {
            "description": "ISO code or state, province, or district name.\n\nOnly returned when `context=edit`.\n",
            "type": "string",
            "example": "CA"
          },
          "billing_postcode": {
            "description": "Postal code.\n\nOnly returned when `context=edit`.\n",
            "type": "string",
            "example": "12345-678"
          },
          "billing_country": {
            "description": "ISO country code.\n\nOnly returned when `context=edit`.\n",
            "type": "string",
            "example": "US"
          }
        }
      },
      "UserName": {
        "type": "object",
        "properties": {
          "first": {
            "description": "The person's first name.",
            "type": "string",
            "example": "Jamie"
          },
          "last": {
            "description": "The person's last name.",
            "type": "string",
            "example": "Cook"
          },
          "display": {
            "description": "The person's public display name.",
            "type": "string",
            "example": "Jamie Cook"
          }
        }
      },
      "Webhook": {
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "description": "Unique webhook Identifier. The WordPress post `ID`."
              },
              {
                "$ref": "#/components/schemas/ResourceId"
              },
              {
                "example": 654
              }
            ]
          },
          "name": {
            "description": "A friendly, human-readable name for the webhook.",
            "type": "string",
            "minimum": 1,
            "example": "A Student Enrolled in a Course"
          },
          "status": {
            "description": "The status of the webhook.\n\n+ `active`: Payload will be delivered\n+ `paused`: Delivery is disabled by an admin.\n+ `disabled`: Delivery is disabled because of delivery failure.\n",
            "type": "string",
            "enum": [
              "active",
              "paused",
              "disabled"
            ],
            "default": "disabled"
          },
          "topic": {
            "description": "The Webhook topic.",
            "type": "string",
            "example": "student.created"
          },
          "delivery_url": {
            "description": "The webhook payload delivery URL.",
            "type": "string",
            "example": "https://example.tld/webhook-receipt/endpoint"
          },
          "secret": {
            "description": "An optional secret key used to generate the webhook delivery signature.\n\nIf no secret is supplied and random string will be generated using `wp_generate_password()`.\n",
            "type": "string",
            "example": "$P3CI41-$3CR37!"
          },
          "resource": {
            "description": "The parsed `topic` resource.",
            "type": "string",
            "readOnly": true,
            "example": "student"
          },
          "event": {
            "description": "The parsed `topic` event.",
            "type": "string",
            "readOnly": true,
            "example": "created"
          },
          "hooks": {
            "description": "An array of hook names associated with the topic.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "llms_user_registered"
            },
            "readOnly": true
          },
          "created": {
            "description": "Creation date.",
            "type": "string",
            "format": "date-time",
            "example": "2019-03-20T17:22:05",
            "readOnly": true
          },
          "updated": {
            "description": "Date last modified.",
            "type": "string",
            "format": "date-time",
            "example": "2019-05-20T17:25:05",
            "readOnly": true
          },
          "_links": {
            "description": "A map of links to other related API resources.",
            "readOnly": true,
            "type": "object",
            "properties": {
              "self": {
                "description": "REST URI to the webhook.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "href": {
                      "type": "string",
                      "example": "/wp-json/llms/v1/webhooks/654"
                    }
                  }
                }
              },
              "collection": {
                "description": "REST URI to the webhooks collection.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "href": {
                      "type": "string",
                      "example": "/wp-json/llms/v1/webhooks/"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "responses": {
      "Error400": {
        "x-summary": "Bad request.",
        "description": "Invalid or malformed request syntax.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error400"
            }
          }
        }
      },
      "Error401": {
        "x-summary": "Unauthorized.",
        "description": "Invalid API Credentials.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error401"
            }
          }
        }
      },
      "Error403": {
        "x-summary": "Forbidden.",
        "description": "The client does not have access to perform the requested action.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error403"
            }
          }
        }
      },
      "Error404": {
        "x-summary": "Not Found.",
        "description": "The requested resource could not be located.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error404"
            }
          }
        }
      }
    },
    "parameters": {
      "Context": {
        "name": "context",
        "in": "query",
        "description": "Specify the scope under which the request is made. `edit` should be used when requesting content to be modified; `view` should be used when requesting content to be displayed.",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "view",
            "edit"
          ],
          "default": "view",
          "example": "edit"
        }
      },
      "EnrollmentStatus": {
        "name": "enrollment_status",
        "in": "query",
        "description": "Limit results by enrollment status.",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/EnrollmentStatus"
        }
      },
      "EnrollmentTrigger": {
        "name": "trigger",
        "in": "query",
        "description": "The trigger of the enrollment to act on.",
        "required": false,
        "schema": {
          "type": "string",
          "default": "any"
        }
      },
      "Exclude": {
        "name": "exclude",
        "in": "query",
        "description": "Exclude a list of `id`s from results. Accepts a single `id` or a comma separated list of `id`s.",
        "schema": {
          "type": "string",
          "example": [
            10,
            11,
            12
          ]
        }
      },
      "Include": {
        "name": "include",
        "in": "query",
        "description": "Limit results to a list of `id`s. Accepts a single `id` or a comma separated list of `id`s.",
        "schema": {
          "type": "string",
          "example": [
            1,
            2,
            3
          ]
        }
      },
      "Order": {
        "name": "order",
        "in": "query",
        "description": "Specifcy the sort order for a collection of results.",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "asc",
            "desc"
          ],
          "default": "asc"
        }
      },
      "Page": {
        "name": "page",
        "in": "query",
        "description": "Specify the page number for a paginated collection.",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 1,
          "example": 1
        }
      },
      "PerPage": {
        "name": "per_page",
        "in": "query",
        "description": "Specify the number of results per paginated collection page.",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 10
        }
      },
      "PostPassword": {
        "name": "password",
        "in": "query",
        "description": "Post password. Required if the post is password protected.",
        "required": false,
        "schema": {
          "type": "string",
          "example": "p4$sW0rd"
        }
      },
      "PostType": {
        "name": "post_type",
        "in": "query",
        "description": "Filter results to those of a specific `post_type`.",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "course",
            "lesson",
            "llms_membership",
            "llms_question",
            "llms_quiz",
            "section"
          ],
          "default": "course"
        }
      },
      "Search": {
        "name": "search",
        "in": "query",
        "description": "Filter results to those matching the specified search string.",
        "required": false,
        "schema": {
          "type": "string",
          "example": "jamie@lifterlms.com"
        }
      },
      "SearchColumns": {
        "name": "search_columns",
        "description": "Column names to be searched. Accepts a single column name or a comma separated list of column names.\n\nAll columns can be searched when `context=edit`, when `context=view` only `id` and `name` may be specified.\n\nWhen the `search` parameter is specified, the default `search_columns` defaults to all of the columns available for the given `context`.\n",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "example": [
            "email",
            "username"
          ],
          "enum": [
            "id",
            "email",
            "name",
            "url",
            "username"
          ]
        }
      }
    },
    "headers": {
      "PaginationTotalPages": {
        "description": "Total number of pages available in the collection.",
        "schema": {
          "type": "integer",
          "example": 28
        }
      },
      "PaginationTotalResults": {
        "description": "Total number of results found in the collection.",
        "schema": {
          "type": "integer",
          "example": 275
        }
      }
    },
    "securitySchemes": {
      "Basic-Authentication": {
        "type": "http",
        "scheme": "basic"
      }
    }
  }
}
